"lang"
{
	"Tokens"
	{
		"modeldocattr.Feet.locktolerance:help"		"The foot lock calculation looks at how far each foot moves between one frame and the next to help determine whether the foot is planted on the ground.  This value defines the tolerance of how different the position of the foot can be from one frame to the next before it is considered to be moving as part of a step"
		"modeldocattr.Feet.verticaltolerance:help"		"The foot lock calculation looks at how far each foot moves between one frame and the next to determine whether the lock should be on or off.  This value defines the tolerance of how different the height of the foot can be from one frame to the next and still be considered \"stationary\""
		"modeldocattr.Feet.heighttolerance:help"		"The foot lock calculation looks at how high the foot is off the ground to help determine whether the foot is planted on the ground.  This value defines the tolerance of how high the foot can be from its lowest point in the animation before it is considered to be raised off the ground as part of a step"
		"modeldocattr.Feet.walkinplacetolerance:help"		"Special handling is needed for animations where the feet lift off and land in about the same place.  This value represents how different the foot locations can be between the start and end of a step before the motion is considered to be walking in place.  "
		"modeldocattr.Foot.autolevel:help"		"When enabled, the height of the Toe and Heel offsets will be made the same so that the foot lies flat on the ground in the bind pose"
		"modeldocattr.BreakPieceSimpleParticles.damage_direction_cp:name_ref"		"Damage Direction CP"
		"modeldocattr.BreakPieceSimpleParticles.damage_direction_cp:help"		"Direction direction is set as the control point vector.  The orientation of the damage direction is set for the control point orientation."
		"modeldocattr.BreakPieceSimpleParticles.velocity_cp:name_ref"		"Velocity CP"
		"modeldocattr.BreakPieceSimpleParticles.velocity_cp:help"		"The velocity of the breaking prop is set as the vector of this control point.  The orientation of the velocity is also set to the control point orientation. "
		"modeldocattr.BreakPieceSimpleParticles.angular_velocity_cp:name_ref"		"Angular Velocity CP"
		"modeldocattr.BreakPieceSimpleParticles.angular_velocity_cp:help"		"The angular velocity of the breaking prop is set as the vector of this control point.  

As its orientation is otherwise unused, the 2D orientation of the velocity (not angular velocity) is also set to the control point orientation. "
		"modeldocnode.ClothSpring:name_ref"		"ClothSpring"
		"modeldocnode.ClothSpring:help_ref"		"Cloth simulation spring."
		"modeldocnode.ClothSpring:help"		"Connects two cloth nodes with a distance constraint. By default, the distance goes from 0 to the distance in bind pose, so be careful with curvy surfaces and bend/torsion springs: they resist going completely flat by default. If you want a very stiff spring, enable advanced parameters and set explicit length. It's set to min=max from binding pose at the time of spring creation with Add Springs wizard."
		"modeldocnode.ClothNode:name_ref"		"ClothNode"
		"modeldocnode.ClothNode:help_ref"		"Cloth simulation node."
		"modeldocnode.ClothNode:help"		"One cloth simulation particle/node/vertex. Multiple nodes may be parented to the same joint. "
		"clothchain.joint_name"		"Joint Name"
		"clothchain.joint_name:shorthelp"		"Joint Name"
		"clothchain.joint_name:help"		"<style>
table {
  border: 2px solid black;
  margin: 2px
  padding: 3px;
}
p, td {padding:3px;}
</style>
<table border=\"1\"><tr><td><p>Name of the joint tied to cloth node(s)</p>
<p>In the simplest case, the joint will be simulated as a single point (cloth node, or vertex) and joint orientation will be figured out using heuristics to reduce twisting along joint chain. You should orient +X or -X along the chain.</p></td><td>
In more complex cases, the joint will drive and be driven by multiple generated nodes. E.g. here every joint is driven by 2 vertices to the sides
</td></tr><tr><td>
<img src='game:tools/images/model_editor/clothchain_simple.gif' />
</td><td>
<img src='game:tools/images/model_editor/clothchain_extrude2.jpg' />
</td></tr></table>"
		"clothchain.joint_parent"		"Parent Joint"
		"clothchain.joint_parent:shorthelp"		"Name of the parent joint"
		"clothchain.joint_parent:help"		"<p>Cloth chain relies on joint hierarchy information to generate cloth around the joints</p>
<p>All the different types of springs are generated by going to parent, grandparent or great-grandparent of the joint<p>"
		"clothchain.stretch_spring"		"Stretch Spring"
		"clothchain.stretch_spring:shorthelp"		"Structural Springs"
		"clothchain.stretch_spring:help"		"<p>Cloth chain relies on joint hierarchy information to generate cloth around the joints</p>
<p>All the different types of springs are generated by going to parent, grandparent or great-grandparent of the joint<p>
<table><th><tr font=\"large\"><td>Stretch</td><td>Bend</td><td>Torsion</td></tr></th>
<tr>
	<td style=\"background-color:yellow;color:black;\"><b>Stretch</b> springs are red. Connect structurally closest elements.</td>
	<td><b>Bend</b> springs are yellow. They skip a parent.</td>
	<td><b>Torsion</b> springs are blue. They skip <b>2</b> parents.</td>
</tr>
<tr>
	<td><img src='game:tools/images/model_editor/clothchain_stretch.jpg' /></td>
	<td><img src='game:tools/images/model_editor/clothchain_bend.jpg' /></td>
	<td><img src='game:tools/images/model_editor/clothchain_torsion.jpg' /></td>
<tr>"
		"clothchain.simulate"		"Simulate"
		"clothchain.simulate:shorthelp"		"Determines whether the joint simulates or is fixed"
		"clothchain.simulate:help"		"<style>
table {
  border: 2px solid black;
  margin: 2px
  padding: 3px;
}
p, td {padding:3px;}
</style>
<p>When Simulate is checked, the node(s) around this joint will be simulated, i.e. free to move.</p>
<p>When it's unchecked, those nodes will be fixed by animation</p>
<p>In the example below, the tip of the chain is simulated on the left, and fixed (by unchecking the Simulate box) on the right</p>
</p>The root of the chain is always fixed</p>
<table border=\"1\">
<tr>
	<td>Default setup for the joint chain: only one (root) joint is fixed. The rest are simulated.</td>
	<td>Chain fixed on both ends. Yellow and pink show the joints and their corresponding Simulate checkboxes</td>
</tr>
<tr>
	<td><img src='game:tools/images/model_editor/clothchain_simulated.jpg' /></td>
	<td><img src='game:tools/images/model_editor/clothchain_static_node.jpg' /></td>
</tr>
</table>"
		"clothchain.goal_strength"		"Goal Strength"
		"clothchain.goal_strength:shorthelp"		"How strong is the pull of the animated goals on cloth. Range: 0..1"
		"clothchain.goal_strength:help"		"<p>TL;DR: This setting dictates how much the cloth follows the animation</p>
<p>Cloth generally is driven by animation. Animation represents the \"goal\" for cloth. Every cloth node has corresponding animated position, and goal strength is the strength of the magnet that pulls cloth to its animated goal shape.</p>
<p>When you set the goal strength to 0, the pull is non-existent and animaiton doesn't matter to cloth. Cloth just hangs down</p>
<p> When you set the goal strength to 1, it will snap cloth to the animated goal with all its strength</p>"
		"clothchain.stray_radius"		"Stray Radius"
		"clothchain.stray_radius:shorthelp"		"How far cloth vertex may stray from animated goal position. Range: 0..inf"
		"clothchain.stray_radius:help"		"<p>Every cloth vertex has the animated position, defined by animation</p>
<p>If stray radius is set, it defines how far it can stray from that position. If you want cloth to move freely, but within some bounds away from the animation, set this to the distance</p>
<p>Unlike goal strength, stray radius has no effect when the vertex is within the range of its animated goal. If it strays beyond the range, it's yanked back hard (or rather with hardness determined by stray radius stretchiness)</p>
<p>Here's an example of restraining the range of sudden movement with stray radius. Note that the cloth stays well within the stray radius. In this case, it happens because stray radius restricted previous movement so the cloth doesn't have a long way to swing back from it. Cloth particles are not affected by stray radius at all when they're inside the stray radius sphere. They're only affected when they hit against the sphere boundary.</p>
<p><img src='game:tools/images/modeldoc_editor/cloth_stray_radius.png' /></p>"
		"clothchain.goal_damping"		"Goal Damping"
		"clothchain.goal_damping:shorthelp"		"How fast the goal strength pulls "
		"clothchain.goal_damping:help"		"<p>Cloth generally is driven by animation. Animation represents the \"goal\" for cloth. Every cloth node has corresponding animated position, and goal strength is the strength of the magnet that pulls cloth to its animated goal shape. Goal damping is how fast that magnet works.</p>
<p>When you set the goal damping to 0, the pull is fast and decisive.</p>
<p> When you set the goal strength to 1, the pull will be softer and slower</p>
<p>When the goal strength is weak or 0, goal damping doesn't matter</p>"
		"clothchain.collision_radius"		"Collision Radius"
		"clothchain.collision_radius:shorthelp"		"How thick the cloth vertex is"
		"clothchain.collision_radius:help"		"<p>Cloth vertices may collide with collision primitives: capsules, spheres, boxes. Collision Radius determines the distance at which the vertex collides with collision primitive and can be used to simulate cloth thickness or keep some vertices more distant from the collider.</p><p><img src='game:tools/images/model_editor/clothchain_collisionradius.jpg' /></p>"
		"clothchain.vertex_map"		"Vertex Map"
		"clothchain.vertex_map:help"		"Cloth vertices may belong to one or more vertex maps. This field is a name (or comma-separated names) of vertex map(s) this vertex belongs to. It's useful in applying effects such as wind to only subset of vertices in the system."
		"clothchain.world_collision"		"World Collision"
		"clothchain.world_collision:help"		"Check this for cloth vertices that need to collide with the ground. Currently, different games set up different ground colliders. Citadel has no ground collision, Dota has heightmaps, HL:A just uses a probe to find the floor plane."
		"clothchain.allow_rotation"		"Allow Rotation"
		"clothchain.allow_rotation:shorthelp"		"Whether to allow rotation of fixed joints"
		"clothchain.allow_rotation:help"		"<p>Has no effect on simulated joints.</p>

<p>When a joint is fixed (Simulated checkbox is unchecked), by default it will be fixed both in translation and rotation</p>
<p>You can allow a static joint to rotate by checking Allow Rotation. It will attempt to find neighbor cloth vertices and orient itself according to their movement. If there are no neighbors, rotation will be undefined</p><p>
<img src='game:tools/images/model_editor/flex_cloth_border_joints.png' /></p>"
		"clothchain.lock_translation"		"Lock Translation"
		"clothchain.lock_translation:shorthelp"		"Lock translation to bind pose relative to parent"
		"clothchain.lock_translation:help"		"<p>Prevent the joints from translating in parent space, allowing only rotation. Useful to prevent shear in mushy setups</p>
<p>This is a fixup used for advanced cloth setups. Here is an example: branching chain collapses</p><p><img src='game:tools/images/modeldoc_editor/unlock_translation_sample_bebop.png' /></p>
<p>But if you lock translation on child joints, they can't collapse onto each other because their translation stays the same relative to the root of the whole construction </p><p><img src='game:tools/images/modeldoc_editor/lock_translation_sample_bebop.png' />
<p>If you are setting up simple cloth or are just playing around with it, please leave at default</p>"
		"clothchain.extrude_sides"		"Extrude Sides"
		"clothchain.extrude_sides:help"		"<p>ClothChain can extrude the joint chain into a strip (to simulate flat tails, flags, banners, loincloth etc.) or a tube/sausage (to simulate more full structures like very thick braids of hair or thick tails).</p>
<p><i>Note that when Extrude Radius is 0, nothing is extruded.</i> So set the Radius to 1 or more</p>
<p>The Extrude Sides parameter is how many sides the figure has. 1 means extrude to the left. 2 means extrude left and right. 3 means extrude into a triangular-cross-shape tube. Etc.</p>
<p><img src='game:tools/images/model_editor/clothchain_extrude.png' /></p>"
		"clothchain.extrude_radius"		"Extrude Radius"
		"clothchain.extrude_radius:help"		"<p>ClothChain can extrude the joint chain into a strip or a tube/sausage. The thickness of that strip/tube/sausage is determined by Extrude Radius. When Radius is 0, nothing is extruded</p>
<p><img src='game:tools/images/model_editor/clothchain_extrude_radius.png' /></p>"
		"clothchain.extrude_twist"		"Extrude Twist"
		"clothchain.extrude_twist:help"		"<p>ClothChain can extrude the joint chain into a strip or a tube/sausage. Sometimes it's necessary to orient that structure, and Extrude Twist determines how much to twist the resulting extrusion. This parameters makes no sense in the default case of Extrude Sides = 0. In the example below, optimal twist is 90° from default because it aligns the best with render mesh and implied dynamics of the tail. 180° is the same as 360° is the same as 0°</p>
<p><img src='game:tools/images/model_editor/clothchain_extrude_twist.png' /></p>"
		"clothchain.drag"		"Extra Drag"
		"clothchain.drag:shorthelp"		"Air drag. Range: 0..1"
		"clothchain.drag:help"		"<p>In addition to goal damping, there's additional drag to apply to cloth. The drag is very simple, it just robs cloth vertices of their velocity regardless of topology</p>"
		"clothchain.mass"		"Mass"
		"clothchain.mass:help"		"<p>Mass is technically the mass of the corresponding cloth vertex. It does <i>not</i> behave in a way artistic mass behaves: the cloth won't behave differently if you set all node masses to 10 or 1000. Only the ratio of masses in neighbor vertices matters, so if you want a long chain with heavy vertex at the end, you can set that heavy vertex mass to 10 and the chain will behave differently</p>"
		"clothchain.bend_spring"		"Bend Spring"
		"clothchain.bend_spring:help"		"<p>Cloth chain relies on joint hierarchy information to generate cloth around the joints</p>
<p>All the different types of springs are generated by going to parent, grandparent or great-grandparent of the joint</p>
<style>
table {
  border: 2px solid black;
  margin: 2px
  padding: 3px;
}
.selected {padding:3px;background-color:yellow;text-color:black;}
</style>
<table style=\"border:2px solid yellow;\"><th><tr font=\"large\"><td>Stretch</td><td>Bend</td><td>Torsion</td></tr></th>
<tr>
	<td>Stretch springs are red. Connect structurally closest elements.</td>
	<td class=\"selected\" style=\"background-color:yellow;color:black;\"><b>Bend</b> springs are yellow. They skip a parent.</td>
	<td>Torsion springs are blue. They skip <b>2</b> parents.</td>
</tr>
<tr>
	<td><img src='game:tools/images/model_editor/clothchain_stretch.jpg' /></td>
	<td><img src='game:tools/images/model_editor/clothchain_bend.jpg' /></td>
	<td><img src='game:tools/images/model_editor/clothchain_torsion.jpg' /></td>
<tr>"
		"clothchain.torsion_spring"		"Torsion Spring"
		"clothchain.torsion_spring:help"		"<p>Cloth chain relies on joint hierarchy information to generate cloth around the joints</p>
<p>All the different types of springs are generated by going to parent, grandparent or great-grandparent of the joint</p>
<style>
table {
  border: 2px solid black;
  margin: 2px
  padding: 3px;
}
.selected {padding:3px;background-color:yellow;text-color:black;}
</style>
<table style=\"border:2px solid yellow;\"><th><tr font=\"large\"><td>Stretch</td><td>Bend</td><td>Torsion</td></tr></th>
<tr>
	<td>Stretch springs are red. Connect structurally closest elements.</td>
	<td>Bend springs are yellow. They skip a parent.</td>
	<td class=\"selected\" style=\"background-color:yellow;color:black;\"><b>Torsion</b> springs are blue. They skip <b>2</b> parents.</td>
</tr>
<tr>
	<td><img src='game:tools/images/model_editor/clothchain_stretch.jpg' /></td>
	<td><img src='game:tools/images/model_editor/clothchain_bend.jpg' /></td>
	<td><img src='game:tools/images/model_editor/clothchain_torsion.jpg' /></td>
<tr>"
		"clothchain.gravity_z"		"Gravity"
		"clothchain.gravity_z:shorthelp"		"Normal Gravity (-Z) affecting the cloth vertices"
		"clothchain.gravity_z:help"		"Gravity of 1 is normal gravity. 0 will make your cloth float, and -1 will pull it upward."
		"clothchain.suspender"		"Suspender Springs"
		"clothchain.suspender:help"		"When you have a long cape or banner, you can prevent it from stretching too much by creating suspender springs. They connect vertices to the closest fixed vertex."
		"clothchain.stray_radius_stretchiness"		"Stray Radius Stretchiness"
		"clothchain.stray_radius_stretchiness:help"		"<p>Every cloth vertex has the animated position, defined by animation</p>
<p>If stray radius is set, it defines how far it can stray from that position.</p>
<p>Stretchiness kicks in once cloth vertex is beyond stray radius. You can regulate how hard the vertex is returned into the bubble around the animated position within the stray radius.</p>"
		"clothchain.friction"		"Friction"
		"clothchain.friction:help"		"Friction refers to friction against collision objects (spheres, capsules or boxes). It has no other effect on cloth unless it is in contact with colliders."
		"clothchain.end_effector"		"End Effector"
		"clothchain.end_effector:help"		"When End Effector is set to non-zero value, a new cloth vertex is created, extruded by that value along X axis from the joint. This is useful to create that extra virtual joint at the end of the chain that is not needed for animation, but is useful to simulate for dynamic effects. Set it to negative value if you want to extrude along -X"
		"clothchain.twist_relax:help"		"<p><b>Experimental</b></p>
<p>The orientation of a bone affected by cloth is usually determined by the closest 3+ cloth vertices/nodes. Sometimes however there are only 1 or 2 vertices available, as for example in case of unextruded ropes/chains. They are the most efficient to simulate, but they don't provide enough information to unambiguously determine bone orientations. In that case, cloth prior to 2022 was taking the root of the chain orientation, and interpolated that along the chain.</p>

<p>Depending on the chain structure, this may cause quick flips of the chains, e.g. tassles that are modeled 90 degrees away from their relaxed state. Sometimes it may cause cloth to ignore twisting motion from animation. For example here is a chain of 3 joints that goes from bottom to top, root at the bottom and the tip (at the top) are both static (not simulating) but with free rotation. When the top is rotated, the chain doesn't twist because it takes the twist from the root, that isn't twisting.</p>

<p>Here is another example of two chains connecing in the middle. The left half is twisted, and the right isn't, and they meet in the middle. The twists are conflicting and have an unpleasant discontinuity in the middle.

<p>Twist Relax attribute is made to distribute the twist along the chain softly. Think of the twist as flowing along the chain, including branches. The Twist Relax amount is how fast it flows. If you have both ends fixed (like in this example), this attribute will flow twist from both ends of the chain and balance out in the middle to create a pleasant falloff.</p>

<p><img src='game:tools/images/modeldoc_editor/twist_relax_0.png' />
<img src='game:tools/images/modeldoc_editor/twist_relax_1.png' /></p>
<p><img src='game:tools/images/modeldoc_editor/twist_relax_0a.png' /><img src='game:tools/images/modeldoc_editor/twist_relax_1a.png' /></p>"
		"clothchain.child_sibling_spring:help"		"<p>When there's a branch in cloth chain, sometimes you want the siblings to fall free. This is the default behavior.</p>

<p><img src='game:tools/images/modeldoc_editor/help_cloth_chain_branch0.png' />
</p>

<p>But sometimes you want them to keep structure. Then set the sibling attribute to non-zero (the value means stiffness of the spring between siblings).</p>

<p><img src='game:tools/images/modeldoc_editor/help_cloth_chain_branch1.png' />
</p>

<p>The important additional consideration in branchy ClothChains is that it's impossible to align all joints with their X pointing down to a child: you can't point axis X at both children at the same time. So, you usually need to also use Twist Relax (which doesn't have the requirement of joint alignment).</p>"
		"clothchain.stiff_hinge:help"		"<p>One way to resist bending is to add bend springs that connect child and grandparent. This works well to resist large (over 60 degree) bends, but does nothing to resist small but significant (5-15 degrees) bends.</p>

<p>Stiff Hinge affects all 3 nodes: child, parent and grandparent. It pulls them together along one line, and this scheme resists small bends very well, but doesn't resist large (over 60 degrees) bends very well.</p>

<p>So, depending on how stiff you want the bend resistance to be and at what angles, you might want to use Stiff Hinge, Bend spring attribute, or both at the same time in some cases when there can be very wide range of motion in some extreme or fast animations.</p>"
		"clothchain.stiff_hinge_angle:help"		"When you use Stiff Hinge attribute, it can be too stiff. If you want to have some \"give\" in the bend, you have the option to set non-zero Stiff Hinge Angle (in degrees). This will allow the chain to bend up to that angle without any resistance, and stiff hinge algorithm will only kick in after that angle."
		"clothchain.motion_bias:help"		"<p>This is made specifically to model chains of old-style Source1 jigglebones that were perfect to model antennae. Bias of 0 will mean the motion is traveling from child to parent and parent to child equally. This will make your chain more like a normal rope. But if you want the parent to affect the motion of the child, but child <b>not</b> to affect the parent, set motion bias to 1. This will ensure that motino is traveling down the chain but not up the chain.</p>

<p>When used together with stiff hinge, this attribute ensure perfect stiffness of your antenna joint chain. So perfect that there's no springiness to the antenna at all, it'll be perfectly rigid unless you soften it up somehow. One way to soften it is to set the bias to less than 1 (try 0.5). It will allow some, but not, of the motion to travel up the chain.</p>
<p>Another variant would be to set Stiff Hinge Angle to something small (try 5), and Motion Bias to 1. This will keep the hinges perfectly stiff, but will allow for the bend up to specified angle</p>"
		"clothchain.extra_iterations:help"		"<p>Sometimes springs aren't stiff enough. Setting Extra Iterations to above 0 will effectively add the spring multiple times, so it'll be solved multiple times, so in large systems it will be stiffer.</p>

<p> This only makes sense in large systems because in small systems the spring will be solved the very first time, and solving it again won't change any behavior. You can only observe the difference in behavior in a large system, where there are many other springs tugging on cloth so that it makes sense to re-solve this spring after those other springs had the chance to move the joint</p>

<p><b>Use with caution</b>: this will affect performance if used a lot, and you get most of the benefits, if any, with very small numbers like 1 or 2. Usually setting it to higher number makes no difference but costs CPU. But in general, solving springs is very cheap and won't cost any CPU if just used sparingly here and there</p>"
		"modeldocnode.BreakPieceSimpleParticles:name_ref"		"BreakPieceSimpleParticles"
		"modeldocnode.BreakPieceSimpleParticles:help_ref"		"Spawn particle meshes when this prop breaks. (Automatically creates a helper model with a bodygroup choice for each particle, a snapshot that positions them in the appropriate places, and a breakcommand that spawns a particlesystem driven by the model and vsnaps.)"
		"modeldocnode.BreakPieceSimpleParticles:help"		"Spawn particle meshes when this prop breaks. (Automatically creates a helper model with a bodygroup choice for each particle, a snapshot that positions them in the appropriate places, and a breakcommand that spawns a particlesystem driven by the model and vsnaps.)
Model scale will be passed down on Cp #9

if your model will be scaled. you need to set the render models -> Model scale cp and add a globally scale initial attributes on default with cp 9 as the Scale cp. "
		"clothchain.extrude_forward_axis:help"		"Normally animation should follow the convention that a chain of joints have X axes pointing down the chain.
When you need to extrude cloth (to the side), you can use Extrude attributes and Extrude Twist will rotate the extrusion around the chain length, defined by the joint X axis.
But if you made a Y-down or Z-down joint instead of the conventional X-down joint, you can still specify Y or Z as Forward Axis and still use extrude and extrude twist attributes, only the extrusion and twist will happen around those axes. "
		"clothchain.animated_length:help"		"When animation happens, cloth compresses, stretches and twists. The default spring lengths that try to keep cloth in its original shape are taken from the default bind pose. It is the function of animation to deform the mesh, and the function of cloth to keep it from deforming too far.
However, sometimes it's useful to do the opposite and animate the cloth spring lengths. E.g. you can imagine a monster with tentacles whose lengths animate with time. You can animate the tentacle lengths, but the cloth setup will keep them the original (bind pose) length. If you want the tentacle cloth to also animate its size, use Animated Lengths checkbox - when checked, the lengths of the springs are going to be taken from the animated pose, not from bind pose. The lengths are going to be dynamic and will behave very differently from the normal cloth, so only use this checkbox conciously for specific setups where you need to animate the lengths of cloth springs."
		"modeldocnode.BreakPieceExternal:name_ref"		"BreakPieceExternal"
		"modeldocnode.BreakPieceExternal:help_ref"		"Reference to a separate model to spawn when a physics prop is broken."
		"modeldocnode.BreakPieceExternal:help"		"Reference to a separate model to spawn when a physics prop is broken.

<p><b>NOTE:</b> Skinned meshes may require offsets for proper positioning. Check the <em>Compiled Preview Outliner</em> for the skeleton root's <em>Bind Angles</em>. </p>"
		"modeldocattr.Softbody.cloth_enable_empty_model:name_ref"		"Enable Empty Model"
		"modeldocattr.Softbody.cloth_enable_empty_model:help"		"Cloth without any dynamic content (no moving parts) will be compiled to nothing, because it doesn't affect the rendered model. However sometimes cloth with only collision may be used to collide with other pieces of cloth (CS2 keychains collide with their guns, which are separate entities). In those cases, we still need to spawn the cloth of the gun even if it doesn't have any simulating parts. This checkbox enables that."
		"modeldocattr.ClothParams.immovable:name_ref"		"Immovable model (hint)"
		"modeldocattr.ClothParams.immovable:help"		"Check this hint if the model is not supposed to move, like a plant on a map that doesn't move.
The only thing this affects is how cloth state is streated: when you look away, cloth stops simulating. When you look at the object again, cloth state is reset and cloth simulates from initial state. This is undesirable in some cases, as it resets cloth that otherwise should be still, like a plant in a corner of a room. Setting this hint will not reset cloth state.
The danger is that if you animate this model, look away and then back at it, the cloth will jump from the state previously seen to the current state, and it can be jarring for moving characters"
		"modeldocattr.MeshSimplify.visualizeEdges:name_ref"		"(Debug) Visualize Simplification Edges"
		"modeldocattr.MeshSimplify.visualizeEdges:help"		"Visualizes edges that have an impact on simplification.<br><br>
<b>Red</b> lines & vertices are a LOCKED vertex/edge and not allowed to be removed.  These will impact simplification the most.<br>
<b>Green</b> lines are on border with an attribute seam (two seam edges).<br>
<b>Blue</b> edges are on a border (two open edges) but do not have attribute seams.<br>
<b>Magenta</b> are \"complex\".<br>
"
		"modeldocattr.ClothEffectWind.local_space:name_ref"		"Local Space"
		"modeldocattr.ClothEffectWind.local_space:help"		"Generally wind is computed from the entity motion plus effect wind . So even with wind = 0 there will still be wind if the hero is on a zipline or running.
When you set Local Space to 1, the oncoming wind will be excluded (wind from animation will be included, e.g. when waving a flag in animation without moving a hero, the flag will still be affected by the oncoming wind from animtion)
You can blend it, too, between 0 and 1"
		"modeldocattr.ClothEffectWind.vortex_count:name_ref"		"Vortices"
		"modeldocattr.ClothEffectWind.vortex_count:help"		"How many vortices/eddies/swirlies will be computed around cloth. Use low number (1-4) for efficiency"
		"modeldocattr.ClothEffectWind.time_multiplier:name_ref"		"Time Multiplier"
		"modeldocattr.ClothEffectWind.time_multiplier:help"		"When time slows down, so does simulation. If you aren't specifically going for time dilation effects, please don't set this to 0.001 but figure out the other parameters instead. "
		"modeldocattr.ClothEffectWind.underwater:name_ref"		"Underwater"
		"modeldocattr.ClothEffectWind.underwater:help"		"Changes computation to something resembling dense fluid rather than air. Useful for floaty effects. "
		"modeldocattr.ClothEffectWind.vortex_cell_size:name_ref"		"Max Vortex Size, Inches"
		"modeldocattr.ClothEffectWind.vortex_cell_size:help"		"The size of every vortex, in inches. Smaller size means it will reach into smaller region. Imagine real vortices, how small do you want them to be?"
		"modeldocattr.ClothEffectWind.vortex_choppiness:name_ref"		"Variety, Hz"
		"modeldocattr.ClothEffectWind.vortex_choppiness:help"		"How many times per second vortex will change"
	}
}
