<!-- kv3 encoding:text:version{e21c7f3c-8a33-41c5-9977-a76d3a32aa0d} format:generic:version{7412167c-06e9-4698-aff2-e63eb59037e7} -->
{
	diagnostic_globals = 
	{
		operators = 
		[
			
			{
				name = "test_opvars"
				operator = "util_null"
				operator_variables = 
				{
					test_float = 
					{
						data_type = "float"
						value = "0.000000"
					}
					number_of_local_players = 
					{
						data_type = "float"
						value = "666.000000"
					}
					test_array_max_value = 
					{
						data_type = "float"
						value = 
						[
							"1.000000",
							"0.000000",
							"33.000000",
							"4.000000",
						]
					}
					local_player_origins = 
					{
						data_type = "float3"
						value = 
						[
							"[ 1.0, 2.0, 3.0 ]",
							"[ 2.0, 2.0, 3.0 ]",
							"[ 3.0, 2.0, 3.0 ]",
							"[ 4.0, 2.0, 3.0 ]",
						]
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
			display_group = "utility"
		}
	}
	diagnostics_arrays = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					zero_length = 
					{
						data_type = "float"
						soundevent_data = "true"
						value = 
						[
						]
					}
					event_vsnds = 
					{
						data_type = "vsnd"
						soundevent_data = "true"
						value = 
						[
							"sounds/weapons/bullet_impacts/wpn_bullet_impact_dry_zombie_01.vsnd",
							"sounds/weapons/bullet_impacts/wpn_bullet_impact_dry_zombie_02.vsnd",
							"sounds/weapons/bullet_impacts/wpn_bullet_impact_dry_zombie_03.vsnd",
						]
					}
					wave_type = 
					{
						data_type = "enum"
						soundevent_data = true
						enum_decl = 
						{
							value = 
							[
								"none",
								"mysin",
								"mysqr",
								"mytri",
								"mysaw",
							]
						}
						value = 
						[
							"mytri",
							"mysqr",
							"none",
						]
					}
					event_ints = 
					{
						data_type = "float"
						soundevent_data = "true"
						value = 
						[
							"0",
							"1",
							"2",
							"3",
						]
					}
					event_bools = 
					{
						data_type = "bool"
						soundevent_data = "true"
						value = 
						[
							"true",
							"false",
							"true",
							"false",
						]
					}
					event_floats = 
					{
						data_type = "float"
						soundevent_data = "true"
						value = 
						[
							"0",
							"1",
							"2",
							"3",
						]
					}
					event_float2s = 
					{
						data_type = "float2"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 0.0 ]",
							"[ 1.0, 1.0 ]",
							"[ 2.0, 2.0 ]",
							"[ 3.0, 3.0 ]",
						]
					}
					event_float3s = 
					{
						data_type = "float3"
						soundevent_data = "true"
						value = 
						[
							"[ 1.0, 1.0, 1.0 ]",
							"[ 2.0, 2.0, 2.0 ]",
							"[ 3.0, 3.0, 3.0 ]",
							"[ 4.0, 4.0, 4.0 ]",
						]
					}
					event_float4s = 
					{
						data_type = "float4"
						soundevent_data = "true"
						value = 
						[
							"[ 1.0, 1.0, 1.0, 1.0 ]",
							"[ 2.0, 2.0, 2.0, 2.0 ]",
							"[ 3.0, 3.0, 3.0, 3.0 ]",
							"[ 4.0, 4.0, 4.0, 4.0 ]",
						]
					}
					event_float6s = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ]",
							"[ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0 ]",
							"[ 3.0, 3.0, 3.0, 3.0, 3.0, 3.0 ]",
							"[ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0 ]",
						]
					}
					event_speakers = 
					{
						data_type = "float_max_speakers"
						soundevent_data = "true"
						value = 
						[
							"[ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ]",
							"[ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0 ]",
							"[ 3.0, 3.0, 3.0, 3.0, 3.0, 3.0 ]",
							"[ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0 ]",
						]
					}
					array_vsnds = 
					{
						data_type = "vsnd"
						reserve_array = "16"
						value = 
						[
							"sounds/weapons/bullet_impacts/wpn_bullet_impact_dry_zombie_01.vsnd",
							"sounds/weapons/bullet_impacts/wpn_bullet_impact_dry_zombie_02.vsnd",
							"sounds/weapons/bullet_impacts/wpn_bullet_impact_dry_zombie_03.vsnd",
						]
					}
				}
			},
		]
	}
	diagnostics_vsnd_lists = 
	{
		operators = 
		[
			
			{
				name = "bird_variations"
				operator = "util_null"
				operator_variables = 
				{
					vsnd_files = 
					{
						data_type = "vsnd"
						value = 
						[
							"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
							"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01b.vsnd",
							"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02.vsnd",
							"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02b.vsnd",
							"sounds/diagnostics/ambient/random_amb_sfx/forest_bird03.vsnd",
						]
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
			display_group = "utility"
		}
	}
	diagnostic.timed_silence = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					interval = 
					{
						data_type = "float"
						value = "1.000000"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "stop_time"
				operator = "math_float"
				apply = "less_than"
				input1 = "@get_event_info.output_elapsed_time"
				input2 = "@public.interval"
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_execute = "@stop_time.output"
				input_add_dependent = "1"
			},
		]
	}
	diagnostic.start_n_soundevents = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					soundevent_number = 
					{
						data_type = "float"
						value = "100.000000"
					}
				}
			},
			
			{
				name = "if_less_than_num"
				operator = "math_float"
				apply = "less_than"
				input1 = "@goto_head.output_goto_count"
				input2 = "@public.soundevent_number"
			},
			
			{
				name = "start_soundevent"
				operator = "soundevent_start"
				input_spawn_oneshots = "1.000000"
				spawn_orphans = "true"
				input_start = "1"
				soundevent_name = "diagnostic.timed_silence"
			},
			
			{
				name = "goto_head"
				operator = "sos_goto"
				input_execute = "@if_less_than_num.output"
				input_goto_head = "1"
			},
		]
	}
	diagnostic.timed_beeper = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					interval = 
					{
						data_type = "float"
						value = "1.000000"
					}
					pitch = 
					{
						data_type = "float"
						value = "1.000000"
					}
					vsnd_files = 
					{
						data_type = "vsnd"
						value = "sounds/diagnostics/beep.vsnd"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "interval_timer"
				operator = "util_interval_timer"
				input_interval = "@public.interval"
				input_start = "1.000000"
			},
			
			{
				name = "core_start_oneshot"
				operator = "sos_import_stack"
				import_stack = "core_start_oneshot"
				operator_variables = 
				{
					start = 
					{
						value = "@interval_timer.output_interval_not_elapsed"
					}
					volume_min = 
					{
						value = "1.000000"
					}
					volume_max = 
					{
						value = "1.000000"
					}
					pitch_min = 
					{
						value = "@public.pitch"
					}
					pitch_max = 
					{
						value = "@public.pitch"
					}
					vsnd_files = 
					{
						value = "@public.vsnd_files"
					}
				}
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_execute = "@get_event_info.output_unstopped"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	diagnostic.timed_soundevent = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					interval = 
					{
						data_type = "float"
						value = "1.000000"
					}
					pitch = 
					{
						data_type = "float"
						value = "1.000000"
					}
					position = 
					{
						data_type = "float3"
						value = "[0.0, 0.0, 0.0]"
					}
					soundevent = 
					{
						data_type = "string"
						value = "NULLSOUNDEVENT"
					}
					count = 
					{
						data_type = "float"
						value = "0.000000"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "interval_timer"
				operator = "util_interval_timer"
				input_interval = "@public.interval"
				input_start = "1.000000"
			},
			
			{
				name = "start_soundevent"
				operator = "soundevent_start"
				input_spawn_oneshots = "1"
				input_start = "@interval_timer.output_interval_elapsed"
				soundevent_name = "@public.soundevent"
				pass_opvar_args = 1.000000
				operator_variables = 
				{
					public.position = 
					{
						operator_arg_field = "true"
						data_type = "float3"
						value = "@public.position"
					}
				}
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_execute = "@get_event_info.output_unstopped"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
			
			{
				name = "increment_count"
				operator = "opvar_increment_float"
				input_operator_name = "public"
				input_execute = "@interval_timer.output_interval_elapsed"
				input = "1.000000"
				check_event_data = "false"
				input_field_name = "count"
				input_use_namespace = "0.000000"
			},
			
			{
				name = "**timed_soundevent_count:"
				operator = "util_print_float"
				input_execute = "@interval_timer.output_interval_elapsed"
				input = "@public.count"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_start_soundevent = 
	{
		operators = 
		[
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "start_soundevent"
				operator = "soundevent_start"
				input_spawn_oneshots = "0.000000"
				input_start = "@get_event_info.output_unstopped"
				soundevent_name = "Diagnostic.test_timers"
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_execute = "@get_event_info.output_unstopped"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_start_soundevent_loop = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					soundevent_01 = 
					{
						soundevent_data = "true"
						data_type = "sndevt"
						value = ""
						_system_properties = 
						{
							display_group = "normal"
							property_group = "Sound Events"
						}
					}
				}
			},
			
			{
				name = "get_soundevent_data_length"
				operator = "opvar_get_info"
				execute_once = "true"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "soundevent_01"
				input_use_namespace = "false"
			},
			
			{
				name = "get_soundevent_01"
				operator = "opvar_get_sndevt"
				input_execute = "1"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "soundevent_01"
				input_use_namespace = "false"
				array_selection_type = "index"
				input_index = "@goto_head.output_goto_count"
			},
			
			{
				name = "start_soundevent_01"
				operator = "soundevent_start"
				input_spawn_oneshots = "1.000000"
				spawn_orphans = 1
				input_execute = 1
				input_start = 1
				soundevent_name = "@get_soundevent_01.output"
			},
			
			{
				name = "goto_head"
				operator = "sos_goto"
				input_execute = 1
				input_goto_operator = "get_soundevent_01"
				input_max_loop_count = "@get_soundevent_data_length.output_element_count"
			},
		]
	}
	update_test_start_vsnd_rand_oneshot = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					vsnd_files = 
					{
						data_type = "vsnd"
						soundevent_data = "true"
						value = 
						[
							"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
							"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01b.vsnd",
							"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02.vsnd",
							"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02b.vsnd",
							"sounds/diagnostics/ambient/random_amb_sfx/forest_bird03.vsnd",
						]
					}
					restart_time = 
					{
						data_type = "float"
						value = "0.000000"
					}
					fade_out = 
					{
						data_type = "float"
						value = "0.000000"
					}
					time_scale = 
					{
						data_type = "float"
						value = "1.000000"
					}
					delay = 
					{
						data_type = "float"
						value = "0.000000"
					}
					memory_type = 
					{
						data_type = "float"
						value = "0"
					}
					wave_type = 
					{
						data_type = "enum"
						enum_decl = 
						{
							value = 
							[
								"none",
								"mysin",
								"mysqr",
								"mytri",
								"mysaw",
							]
						}
						value = "tri"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "get_vsnd"
				operator = "opvar_get_vsnd"
				execute_once = "true"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "vsnd_files"
				input_use_namespace = "false"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "LFO"
				operator = "mod_LFO"
				wave_type = "@public.wave_type"
				input_frequency = "1.300000"
				input_scale = "0.5"
				input_center = "1"
			},
			
			{
				name = "update_test_start_vsnd"
				operator = "vmix_voice_start"
				input_vsnd1 = "@get_vsnd.output"
				input_start = "@get_event_info.output_unstopped"
				input_speaker_volumes = "[ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ]"
				input_pitch = "1.000000"
				input_time_scale = "@LFO.output"
				input_delay = "@public.delay"
				input_memory_type = "@public.memory_type"
				input_restart_time = "@public.restart_time"
				input_fade_out = "@public.fade_out"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_start_event_vsnd_rand_oneshot = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					vsnd_files = 
					{
						data_type = "vsnd"
						soundevent_data = "true"
						value = "sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd"
					}
					delay = 
					{
						data_type = "float"
						value = "0.000000"
					}
					memory_type = 
					{
						data_type = "float"
						value = "0"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "get_vsnd"
				operator = "opvar_get_vsnd"
				execute_once = "true"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "vsnd_files"
				input_use_namespace = "false"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "update_test_start_vsnd"
				operator = "vmix_voice_start"
				input_vsnd1 = "@get_vsnd.output"
				input_start = "@get_event_info.output_unstopped"
				input_speaker_volumes = "[ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ]"
				input_pitch = "1.000000"
				input_delay = "@public.delay"
				input_memory_type = "@public.memory_type"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_start_stack_vsnd_rand_oneshot = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					file_list_stack_name = 
					{
						data_type = "string"
						value = ""
					}
					file_list_operator_name = 
					{
						data_type = "string"
						value = ""
					}
					file_list_field_name = 
					{
						data_type = "string"
						value = ""
					}
					delay = 
					{
						data_type = "float"
						value = "0.000000"
					}
					memory_type = 
					{
						data_type = "float"
						value = "0"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "get_vsnd"
				operator = "opvar_get_vsnd"
				execute_once = "true"
				check_event_data = "true"
				input_stack_name = "@public.file_list_stack_name"
				input_operator_name = "@public.file_list_operator_name"
				input_field_name = "@public.file_list_field_name"
				input_use_namespace = "false"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "update_test_start_vsnd"
				operator = "vmix_voice_start"
				input_vsnd1 = "@get_vsnd.output"
				input_start = "@get_event_info.output_unstopped"
				input_speaker_volumes = "[ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ]"
				input_pitch = "1.000000"
				input_delay = "@public.delay"
				input_memory_type = "@public.memory_type"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_start_event_vsnd_rand_weighted_oneshot = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					vsnd_files = 
					{
						data_type = "vsnd"
						soundevent_data = "true"
						value = "sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd"
					}
					delay = 
					{
						data_type = "float"
						value = "0.000000"
					}
					memory_type = 
					{
						data_type = "float"
						value = "0"
					}
					weights = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = "0"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "get_vsnd"
				operator = "opvar_get_vsnd"
				execute_once = "true"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "vsnd_files"
				input_use_namespace = "false"
				array_selection_type = "random_weighted"
				weights_field_name = "public.weights"
			},
			
			{
				name = "update_test_start_vsnd"
				operator = "vmix_voice_start"
				input_vsnd1 = "@get_vsnd.output"
				input_start = "@get_event_info.output_unstopped"
				input_speaker_volumes = "[ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ]"
				input_pitch = "1.000000"
				input_delay = "@public.delay"
				input_memory_type = "@public.memory_type"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_timers = 
	{
		operators = 
		[
			
			{
				name = "util_timer"
				operator = "util_timer"
				input_start = "1"
			},
			
			{
				name = "**util_timer:"
				operator = "util_print_float"
				input = "@util_timer.output"
			},
			
			{
				name = "util_timer_ramp"
				operator = "util_timer_ramp"
				input_start = "1"
				input_duration = "100"
				input_end_value = "100"
			},
			
			{
				name = "**util_timer_ramp:"
				operator = "util_print_float"
				input = "@util_timer_ramp.output"
			},
			
			{
				name = "util_interval_timer"
				operator = "util_interval_timer"
				input_start = "1"
				input_interval = "100"
			},
			
			{
				name = "**util_interval_timer:"
				operator = "util_print_float"
				input = "@util_interval_timer.output"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_start_vsnd_lfo = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					test_float = 
					{
						data_type = "float"
						value = "111.111000"
					}
					test_floatB = 
					{
						data_type = "float"
						value = "666.666016"
					}
					test_float2 = 
					{
						data_type = "float2"
						value = "[ 111.111, 222.222 ]"
					}
					test_float3 = 
					{
						data_type = "float3"
						value = "[ 111.111, 222.222, 333.333 ]"
					}
					test_float4 = 
					{
						data_type = "float4"
						value = "[ 111.111, 222.222, 333.333, 444.444 ]"
					}
					test_string = 
					{
						data_type = "string"
						value = "string"
					}
					test_float_array = 
					{
						data_type = "float"
						value = 
						[
							"1.000000",
							"2.000000",
							"3.000000",
							"4.000000",
						]
					}
					memory_type = 
					{
						data_type = "float"
						value = "0"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "lfo_time_scale"
				operator = "math_float"
				apply = "mult"
				input1 = "@get_event_info.output_elapsed_time"
				input2 = "2"
			},
			
			{
				name = "lfo"
				operator = "math_func_float"
				function = "cos"
				normalize_trig = "false"
				input1 = "@lfo_time_scale.output"
			},
			
			{
				name = "lfo_step"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@lfo.output"
				input2 = "0.000000"
			},
			
			{
				name = "lfo_pitch_scale"
				operator = "math_float"
				apply = "mult"
				input1 = "@lfo.output"
				input2 = "0.100000"
			},
			
			{
				name = "lfo_pitch_add"
				operator = "math_float"
				apply = "add"
				input1 = "@lfo_pitch_scale.output"
				input2 = "1.000000"
			},
			
			{
				name = "lfo_abs"
				operator = "math_func_float"
				function = "fabs"
				input1 = "@lfo.output"
			},
			
			{
				name = "speaker_volume_fan"
				operator = "util_float_to_speakers"
				input = "@lfo_abs.output"
			},
			
			{
				name = "play_or_stop"
				operator = "math_float"
				apply = "min"
				input1 = "@lfo_step.output"
				input2 = "@get_event_info.output_unstopped"
			},
			
			{
				name = "update_test_start_vsnd"
				operator = "vmix_voice_start"
				input_vsnd1 = "sounds/diagnostics/bell.vsnd"
				input_start = "@play_or_stop.output"
				input_speaker_volumes = "@speaker_volume_fan.output"
				input_pitch = "@lfo_pitch_add.output"
				input_memory_type = "@public.memory_type"
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_lfo_timing = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "LFO"
				operator = "mod_LFO"
				wave_type = "sqr"
				input_frequency = "0.75"
				input_scale = "0.5"
				input_center = "0.5"
			},
			
			{
				name = "update_test_start_vsnd"
				operator = "vmix_voice_start"
				execute_once = "true"
				input_vsnd1 = "sounds/diagnostics/sin_1024hz_-3db_lp.vsnd"
				input_start = "@get_event_info.output_unstopped"
				input_speaker_volumes = "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"
				input_max_gain_change_per_second = 87
			},
			
			{
				name = "submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1"
				input = "1"
				submix_name = "AllVoices"
				send_type = "named"
			},
			
			{
				name = "set_input"
				operator = "vmix_mixgraph_input"
				input_name = "AllVoices_amp_volume_input"
				input = "@LFO.output"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_env_timing = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					start_time = 
					{
						data_type = "float"
						value = "0"
					}
					last_lfo_value = 
					{
						data_type = "float"
						value = "0"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "LFO"
				operator = "mod_LFO"
				wave_type = "sqr"
				input_frequency = "0.75"
				input_scale = "0.5"
				input_center = "0.5"
			},
			
			{
				name = "last_lfo_value"
				operator = "opvar_get_float"
				check_event_data = "false"
				input_operator_name = "public"
				input_field_name = "last_lfo_value"
			},
			
			{
				name = "lfo_rising_edge"
				operator = "math_float_eval"
				expression = "min( max(_1, 0) , (_2 == 0))"
				input1 = "@LFO.output"
				input2 = "@public.last_lfo_value"
			},
			
			{
				name = "set_last_lfo_value"
				operator = "opvar_set_float"
				check_event_data = "false"
				input_operator_name = "public"
				input_field_name = "last_lfo_value"
				input = "@LFO.output"
			},
			
			{
				name = "set_start_time"
				operator = "opvar_set_float"
				check_event_data = "false"
				input_execute = "@lfo_rising_edge.output"
				input_operator_name = "public"
				input_field_name = "start_time"
				input = "@get_event_info.output_elapsed_time"
			},
			
			{
				name = "update_test_start_vsnd"
				operator = "vmix_voice_start"
				execute_once = "true"
				input_vsnd1 = "sounds/diagnostics/sin_1024hz_-3db_lp.vsnd"
				input_start = "@get_event_info.output_unstopped"
				input_speaker_volumes = "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"
				input_max_gain_change_per_second = 87
			},
			
			{
				name = "lfo_time"
				operator = "math_float_eval"
				expression = "_1 - _2"
				input1 = "@get_event_info.output_elapsed_time"
				input2 = "@public.start_time"
			},
			
			{
				name = "sample_env_curve"
				operator = "container_sample_curve"
				input_time = "@lfo_time.output"
				input_container = "sounds/diagnostics/containers/beep_test_container.vsnd"
			},
			
			{
				name = "submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1"
				input = "1"
				submix_name = "AllVoices"
				send_type = "named"
			},
			
			{
				name = "set_input"
				operator = "vmix_mixgraph_input"
				input_name = "AllVoices_amp_volume_input"
				input = "@sample_env_curve.output"
			},
			
			{
				name = "facing_submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1"
				input = "0"
				send_type = "facing"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_lfo_beep = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "LFO"
				operator = "mod_LFO"
				wave_type = "sqr"
				input_frequency = "0.75"
				input_scale = "0.5"
				input_center = "0.5"
			},
			
			{
				name = "play_or_stop"
				operator = "math_float"
				apply = "min"
				input1 = "@LFO.output"
				input2 = "@get_event_info.output_unstopped"
			},
			
			{
				name = "update_test_start_vsnd"
				operator = "vmix_voice_start"
				execute_once = "true"
				input_vsnd1 = "sounds/diagnostics/beep.vsnd"
				input_start = "@play_or_stop.output"
				input_speaker_volumes = "[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"
				input_max_gain_change_per_second = 96000
			},
			
			{
				name = "submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1"
				input = "1"
				submix_name = "AllVoices"
				send_type = "named"
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_mixgroup_timing = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "update_test_start_vsnd"
				operator = "vmix_voice_start"
				execute_once = "true"
				input_vsnd1 = "sounds/diagnostics/sin_1024hz_-3db_lp.vsnd"
				input_start = "@get_event_info.output_unstopped"
				input_speaker_volumes = "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"
				input_max_gain_change_per_second = 87
			},
			
			{
				name = "layer_amount_test_target_mixgroup"
				operator = "soundmixer_get_mixgroup"
				mixgroup = "layer_amount_target"
			},
			
			{
				name = "submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1"
				input = "1"
				submix_name = "amped"
				send_type = "named"
			},
			
			{
				name = "set_input"
				operator = "vmix_mixgraph_input"
				input_name = "amped_volume_input"
				input = "@layer_amount_test_target_mixgroup.output_volume"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_lfo_beep_env_trigger = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					start_time = 
					{
						data_type = "float"
						value = "0"
					}
					last_lfo_value = 
					{
						data_type = "float"
						value = "0"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "LFO"
				operator = "mod_LFO"
				wave_type = "sqr"
				input_frequency = "0.75"
				input_scale = "0.5"
				input_center = "0.5"
			},
			
			{
				name = "play_or_stop"
				operator = "math_float"
				apply = "min"
				input1 = "@LFO.output"
				input2 = "@get_event_info.output_unstopped"
			},
			
			{
				name = "last_lfo_value"
				operator = "opvar_get_float"
				check_event_data = "false"
				input_operator_name = "public"
				input_field_name = "last_lfo_value"
			},
			
			{
				name = "lfo_rising_edge"
				operator = "math_float_eval"
				expression = "min( max(_1, 0) , (_2 == 0))"
				input1 = "@LFO.output"
				input2 = "@public.last_lfo_value"
			},
			
			{
				name = "set_last_lfo_value"
				operator = "opvar_set_float"
				check_event_data = "false"
				input_operator_name = "public"
				input_field_name = "last_lfo_value"
				input = "@LFO.output"
			},
			
			{
				name = "set_start_time"
				operator = "opvar_set_float"
				check_event_data = "false"
				input_execute = "@lfo_rising_edge.output"
				input_operator_name = "public"
				input_field_name = "start_time"
				input = "@get_event_info.output_elapsed_time"
			},
			
			{
				name = "update_test_start_vsnd"
				operator = "vmix_voice_start"
				execute_once = "true"
				input_vsnd1 = "sounds/diagnostics/beep.vsnd"
				input_start = "@play_or_stop.output"
				input_speaker_volumes = "[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"
				input_max_gain_change_per_second = 96000
			},
			
			{
				name = "submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1"
				input = "1"
				submix_name = "unaltered"
				send_type = "named"
			},
			
			{
				name = "lfo_time"
				operator = "math_float_eval"
				expression = "_1 - _2"
				input1 = "@get_event_info.output_elapsed_time"
				input2 = "@public.start_time"
			},
			
			{
				name = "sample_env_curve"
				operator = "container_sample_curve"
				input_time = "@lfo_time.output"
				input_container = "sounds/diagnostics/containers/beep_test_container.vsnd"
			},
			
			{
				name = "lfo_invert"
				operator = "math_float_eval"
				expression = "1.0 - _1"
				input1 = "@LFO.output"
			},
			
			{
				name = "layer_amount_test_trigger_mixgroup"
				operator = "soundmixer_get_mixgroup"
				mixgroup = "layer_amount_trigger"
			},
			
			{
				name = "mixer_trigger"
				operator = "soundmixer_set_trigger"
				input_trigger = "@lfo_invert.output"
				input_mixgroups = "@layer_amount_test_trigger_mixgroup.output_mixgroups"
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_lfo_beep_timing = 
	{
		operators = 
		[
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "start_soundevent"
				operator = "soundevent_start"
				input_start = "@get_event_info.output_unstopped"
				soundevent_name = "Diagnostic.update_test_lfo_beep"
			},
			
			{
				name = "start_soundevent2"
				operator = "soundevent_start"
				input_start = "@get_event_info.output_unstopped"
				soundevent_name = "Diagnostic.update_test_lfo_timing"
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	update_test_env_beep_timing = 
	{
		operators = 
		[
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "start_soundevent"
				operator = "soundevent_start"
				input_start = "@get_event_info.output_unstopped"
				soundevent_name = "Diagnostic.update_test_lfo_beep"
			},
			
			{
				name = "start_soundevent2"
				operator = "soundevent_start"
				input_start = "@get_event_info.output_unstopped"
				soundevent_name = "Diagnostic.update_test_env_timing"
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	update_test_env_beep_mixlayer_timing = 
	{
		operators = 
		[
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "start_soundevent2"
				operator = "soundevent_start"
				input_start = "@get_event_info.output_unstopped"
				soundevent_name = "Diagnostic.update_test_lfo_beep_env_trigger"
			},
			
			{
				name = "start_soundevent"
				operator = "soundevent_start"
				input_start = "@get_event_info.output_unstopped"
				soundevent_name = "Diagnostic.update_test_mixgroup_timing"
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	update_test_opvar_event_sequence = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					float_sequence_01 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
					float_sequence_02 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
				}
			},
			
			{
				name = "get_event_sequence_01"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence_01"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_sequence_02"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence_02"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "***SEQ01:"
				operator = "util_print_float"
				input = "@get_event_sequence_01.output"
			},
			
			{
				name = "***SEQ02:"
				operator = "util_print_float"
				input = "@get_event_sequence_02.output"
			},
			
			{
				name = "prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_opvar_event_multi_sequence = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					float_sequence1 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
					float_sequence2 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
					float_sequence3 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
				}
			},
			
			{
				name = "get_event_sequence1"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence1"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_sequence2"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence2"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_sequence3"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence3"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "***SEQ1"
				operator = "util_print_float"
				input = "@get_event_sequence1.output"
			},
			
			{
				name = "***SEQ2"
				operator = "util_print_float"
				input = "@get_event_sequence2.output"
			},
			
			{
				name = "***SEQ3"
				operator = "util_print_float"
				input = "@get_event_sequence3.output"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_opvar_event_max_multi_sequence = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					float_sequence1 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
					float_sequence2 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
					float_sequence3 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
					float_sequence4 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
					float_sequence5 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
					float_sequence6 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
					float_sequence7 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
					float_sequence8 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
					float_sequence9 = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
				}
			},
			
			{
				name = "get_event_sequence1"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence1"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_sequence2"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence2"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_sequence3"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence3"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_sequence4"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence4"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_sequence5"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence5"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_sequence6"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence6"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_sequence7"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence7"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_sequence8"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence8"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_sequence9"
				operator = "opvar_get_float"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "float_sequence9"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "***SEQ1"
				operator = "util_print_float"
				input = "@get_event_sequence1.output"
			},
			
			{
				name = "***SEQ2"
				operator = "util_print_float"
				input = "@get_event_sequence2.output"
			},
			
			{
				name = "***SEQ3"
				operator = "util_print_float"
				input = "@get_event_sequence3.output"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_opvar_stack_sequence = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					float_sequence = 
					{
						data_type = "float"
						value = 
						[
							"11.000000",
							"22.000000",
							"33.000000",
							"44.000000",
							"55.000000",
							"66.000000",
							"77.000000",
							"88.000000",
							"99.000000",
						]
					}
				}
			},
			
			{
				name = "get_event_sequence"
				operator = "opvar_get_float"
				input_operator_name = "public"
				input_field_name = "float_sequence"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "***SEQ"
				operator = "util_print_float"
				input = "@get_event_sequence.output"
			},
			
			{
				name = "prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_opvar_global_stack_sequence = 
	{
		operators = 
		[
			
			{
				name = "get_event_sequence"
				operator = "opvar_get_vsnd"
				input_stack_name = "diagnostics_vsnd_lists"
				input_operator_name = "bird_variations"
				input_field_name = "vsnd_files"
				array_selection_type = "forward"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "***SEQ"
				operator = "util_print_vsnd"
				input = "@get_event_sequence.output"
			},
			
			{
				name = "prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_array_index_global_stack_sequence = 
	{
		operators = 
		[
			
			{
				name = "get_event_sequence"
				operator = "opvar_get_random_array_index"
				input_stack_name = "diagnostics_vsnd_lists"
				input_operator_name = "bird_variations"
				input_field_name = "vsnd_files"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "***SEQ"
				operator = "util_print_float"
				input = "@get_event_sequence.output"
			},
			
			{
				name = "prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_array_index_event_sequence = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					float_sequence = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"11.000000",
						]
					}
				}
			},
			
			{
				name = "get_event_sequence"
				operator = "opvar_get_random_array_index"
				input_operator_name = "public"
				check_event_data = "true"
				input_field_name = "float_sequence"
				array_selection_type = "random_exclusive"
				input_use_namespace = "0.000000"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "***SEQ"
				operator = "util_print_float"
				input = "@get_event_sequence.output"
			},
			
			{
				name = "prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_array_index_event_increment = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					float_sequence = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"11.000000",
						]
					}
				}
			},
			
			{
				name = "get_event_sequence"
				operator = "opvar_increment_float"
				input_operator_name = "public"
				input = "1.000000"
				check_event_data = "true"
				input_field_name = "float_sequence"
				array_selection_type = "index"
				input_use_namespace = "0.000000"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "***SEQ"
				operator = "util_print_float"
				input = "@get_event_sequence.output"
			},
			
			{
				name = "prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_array_index_stack_increment = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					float_sequence = 
					{
						data_type = "float"
						value = 
						[
							"0.000000",
						]
					}
				}
			},
			
			{
				name = "get_event_sequence"
				operator = "opvar_increment_float"
				input_operator_name = "public"
				input = "1.000000"
				check_event_data = "false"
				input_field_name = "float_sequence"
				array_selection_type = "index"
				input_use_namespace = "0.000000"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "***SEQ"
				operator = "util_print_float"
				input = "@get_event_sequence.output"
			},
			
			{
				name = "prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_overrides = 
	{
		operators = 
		[
			
			{
				name = "update_test_override_1"
				operator = "math_float"
				apply = "mult"
				input1 = "1.000000"
				input2 = "2.000000"
			},
			
			{
				name = "update_test_override_2"
				operator = "math_float"
				apply = "add"
				input1 = "@update_test_override_1.output"
				input2 = "4.000000"
			},
			
			{
				name = "opvars"
				operator = "util_null"
				operator_variables = 
				{
					test_opvar = 
					{
						data_type = "float"
						value = "1.000000"
						interp_type = "decibel_atten"
						interp_min = "-1.000000"
						interp_max = "1.000000"
					}
					test_opvar2 = 
					{
						data_type = "float"
						value = "777.000000"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_simple_public = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					public_float = 
					{
						data_type = "float"
						value = "777.000000"
						interp_type = "decibel_atten"
						interp_min = "-1.000000"
						interp_max = "1.000000"
					}
					override_float = 
					{
						data_type = "float"
						value = "111.000000"
					}
				}
			},
			
			{
				name = "update_test_simple_public_OPER"
				operator = "math_float"
				apply = "add"
				input1 = "@public.public_float"
				input2 = "4.000000"
			},
			
			{
				name = "update_test_get_local_opvar"
				operator = "opvar_get_float"
				input_operator_name = "public"
				input_field_name = "public_float"
				input_use_namespace = "true"
			},
			
			{
				name = "update_test_get_global_opvar"
				operator = "opvar_get_float"
				input_operator_name = "public"
				input_field_name = "import1_float"
				input_use_namespace = "false"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_simple_import_op = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					import1_float = 
					{
						data_type = "float"
						value = "666.000000"
					}
				}
			},
			
			{
				name = "update_test_import_1"
				operator = "math_float"
				apply = "add"
				input1 = "@public.import1_float"
				input2 = "4.000000"
			},
			
			{
				name = "update_test_import_op"
				operator = "sos_import_stack"
				import_stack = "update_test_simple_public"
				operator_variables = 
				{
					public_float = 
					{
						value = "999"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_simple_serial_import_op = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					serial_float = 
					{
						data_type = "float"
						value = "222.000000"
					}
					serial_float2 = 
					{
						data_type = "float"
						value = "333.000000"
					}
					import1_float = 
					{
						data_type = "float"
						value = "666.000000"
					}
				}
			},
			
			{
				name = "update_test_serial_import_op"
				operator = "sos_import_stack"
				import_stack = "update_test_simple_public"
				input_execute = "1.000000"
				operator_variables = 
				{
					public_float = 
					{
						value = "999"
					}
					public.override_float = 
					{
						field_override = "public.override_float"
						value = "888"
					}
					update_test_simple_public_OPER.input2 = 
					{
						field_override = "update_test_simple_public_OPER.input2"
						value = "@public.serial_float"
					}
				}
			},
			
			{
				name = "update_test_serial_import_op2"
				operator = "sos_import_stack"
				import_stack = "update_test_simple_public"
				input_execute = "0.000000"
				operator_variables = 
				{
					public_float = 
					{
						value = "@public.serial_float2"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_simple_serial_import_op2 = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					serial_float = 
					{
						data_type = "float"
						value = "222.000000"
					}
				}
			},
			
			{
				name = "update_test_serial_import_op"
				operator = "sos_import_stack"
				import_stack = "update_test_simple_public"
				operator_variables = 
				{
					public_float = 
					{
						value = "@public.serial_float"
					}
				}
			},
			
			{
				name = "update_test_serial_import_op2"
				operator = "sos_import_stack"
				import_stack = "update_test_simple_public"
				operator_variables = 
				{
					public_float = 
					{
						value = "@update_test_serial_import_op.public_float"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_simple_nest_import_op1 = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					import1_float = 
					{
						data_type = "float"
						value = "111.000000"
					}
				}
			},
			
			{
				name = "update_test_import_op1"
				operator = "sos_import_stack"
				import_stack = "update_test_simple_public"
				operator_variables = 
				{
					public_float = 
					{
						value = "@public.import1_float"
					}
				}
			},
			
			{
				name = "update_test_simple_nest_import_op1_OPER"
				operator = "math_float"
				apply = "add"
				input1 = "@public.import1_float"
				input2 = "4.000000"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_simple_nest_import_op2 = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					import2_float = 
					{
						data_type = "float"
						value = "222.000000"
					}
				}
			},
			
			{
				name = "update_test_import_op2"
				operator = "sos_import_stack"
				import_stack = "update_test_simple_nest_import_op1"
				operator_variables = 
				{
					import1_float = 
					{
						value = "@public.import2_float"
					}
				}
			},
			
			{
				name = "update_test_simple_nest_import_op2_OPER"
				operator = "math_float"
				apply = "add"
				input1 = "@public.import2_float"
				input2 = "4.000000"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_simple_nest_import_op3 = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					import3_float = 
					{
						data_type = "float"
						value = "333.000000"
					}
				}
			},
			
			{
				name = "update_test_import_op3"
				operator = "sos_import_stack"
				import_stack = "update_test_simple_nest_import_op2"
				operator_variables = 
				{
					import2_float = 
					{
						value = "@public.import3_float"
					}
				}
			},
			
			{
				name = "update_test_simple_nest_import_op3_OPER"
				operator = "math_float"
				apply = "add"
				input1 = "@public.import3_float"
				input2 = "4.000000"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_simple_nest_import_op4 = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					import4_float = 
					{
						data_type = "float"
						value = "444.000000"
					}
				}
			},
			
			{
				name = "update_test_import_op4"
				operator = "sos_import_stack"
				import_stack = "update_test_simple_nest_import_op3"
				operator_variables = 
				{
					import3_float = 
					{
						value = "@public.import4_float"
					}
				}
			},
			
			{
				name = "update_test_simple_nest_import_op4_OPER"
				operator = "math_float"
				apply = "add"
				input1 = "@public.import4_float"
				input2 = "4.000000"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_import_op = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					test_public_float0 = 
					{
						data_type = "float"
						value = "777.000000"
						interp_type = "decibel_atten"
						interp_min = "-1.000000"
						interp_max = "1.000000"
					}
				}
			},
			
			{
				name = "update_test_import_1"
				operator = "math_float"
				apply = "add"
				input1 = "662"
				input2 = "4.000000"
			},
			
			{
				name = "update_test_import_op"
				operator = "sos_import_stack"
				import_stack = "update_test_overrides"
				operator_variables = 
				{
					test_public_float1 = 
					{
						value = "999"
					}
				}
			},
			
			{
				name = "update_test_import_2"
				operator = "math_float"
				apply = "add"
				input1 = "@public.test_public_float0"
				input2 = "@update_test_import_op::update_test_override_2.output"
				operator_variables = 
				{
					test_opvar2 = 
					{
						data_type = "float"
						value = "@public.test_public_float0"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_convar = 
	{
		operators = 
		[
			
			{
				name = "update_test_convar"
				operator = "convar_get"
				convar = "snd_op_test_convar"
			},
			
			{
				name = "update_test_convar2"
				operator = "convar_set"
				execute_once = "true"
				convar = "snd_musicvolume"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_delta = 
	{
		operators = 
		[
			
			{
				name = "update_test_delta"
				operator = "math_delta"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_distant_dsp = 
	{
		operators = 
		[
			
			{
				name = "update_test_distant_dsp"
				operator = "calc_distant_dsp"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_entity_info = 
	{
		operators = 
		[
			
			{
				name = "update_test_distant_dsp"
				operator = "game_entity_info"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_falloff = 
	{
		operators = 
		[
			
			{
				name = "update_test_falloff"
				operator = "calc_falloff"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_float_filter = 
	{
		operators = 
		[
			
			{
				name = "update_test_float_filter"
				operator = "math_filter_float"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_iterate_merge_speakers = 
	{
		operators = 
		[
			
			{
				name = "update_test_iterate_merge_speakers"
				operator = "accumulate_indexed_speakers"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_mixer = 
	{
		operators = 
		[
			
			{
				name = "update_test_mixer"
				operator = "soundmixer_get_mixgroup"
				mixgroup = "bullethit"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_occlusion = 
	{
		operators = 
		[
			
			{
				name = "update_test_occlusion"
				operator = "calc_occlusion_src1"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_utils = 
	{
		operators = 
		[
			
			{
				name = "update_test_null"
				operator = "util_null"
				operator_variables = 
				{
					test_float_field = 
					{
						data_type = "float"
						value = "666.000000"
					}
				}
			},
			
			{
				name = "update_test_print_float"
				operator = "util_print_float"
				input = "@update_test_null.test_float_field"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_mixlayer = 
	{
		operators = 
		[
			
			{
				name = "update_test_mixlayer"
				operator = "soundmixer_set_mixlayer"
				mixgroup = "All"
				mixlayer = "All"
				field = "dsp"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_math_string = 
	{
		operators = 
		[
			
			{
				name = "update_test_math_string"
				operator = "math_string"
				input1 = "test3"
				input2 = "test3"
				apply = "equal"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_calc_distance = 
	{
		operators = 
		[
			
			{
				name = "update_test_calc_distance"
				operator = "calc_distance"
				input_position1 = "[ 110.0, 120.0 ]"
				input_position2 = "[ 0.0, 0.0, 0.0 ]"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_listener_velocity = 
	{
		operators = 
		[
			
			{
				name = "globals"
				operator = "get_system_globals"
				input_execute = "1"
				input_listener_index = "0"
			},
			
			{
				name = "limit_vector_xy"
				operator = "math_float3"
				apply = "mult"
				input1 = "@globals.output_listener_position"
				input2 = "[ 1.0, 1.0, 0.0 ]"
			},
			
			{
				name = "listener_velocity"
				operator = "math_velocity"
				input_position = "@limit_vector_xy.output"
			},
			
			{
				name = "***Velocity:"
				operator = "util_print_float"
				input = "@listener_velocity.output_velocity"
			},
			
			{
				name = "prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "1.000000"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_goto_exit = 
	{
		operators = 
		[
			
			{
				name = "dont_exit"
				operator = "sos_goto"
				input_execute = "0.000000"
				input_goto_end = "0.000000"
			},
			
			{
				name = "***success_didnt_exit:"
				operator = "util_print_float"
				input = "0.000000"
			},
			
			{
				name = "exit"
				operator = "sos_goto"
				input_execute = "1.000000"
				input_goto_end = "true"
			},
			
			{
				name = "***error_didnt_exit:"
				operator = "util_print_float"
				input = "0.000000"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_goto_loop_head = 
	{
		operators = 
		[
			
			{
				name = "if_less_than_3"
				operator = "math_float"
				apply = "less_than"
				input1 = "@goto_head.output_goto_count"
				input2 = "300.000000"
			},
			
			{
				name = "***success_didnt_exit:"
				operator = "util_print_float"
				input = "0.000000"
			},
			
			{
				name = "goto_head"
				operator = "sos_goto"
				input_execute = "@if_less_than_3.output"
				input_goto_head = "true"
			},
			
			{
				name = "***success_DONE:"
				operator = "util_print_float"
				input = "0.000000"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_goto_loop_operator = 
	{
		operators = 
		[
			
			{
				name = "***pre_loop"
				operator = "util_print_float"
				input = "0.000000"
			},
			
			{
				name = "if_less_than_3"
				operator = "math_float"
				apply = "less_than"
				input1 = "@goto_operator.output_goto_count"
				input2 = "3.000000"
			},
			
			{
				name = "***success_didnt_exit:"
				operator = "util_print_float"
				input = "0.000000"
			},
			
			{
				name = "goto_operator"
				operator = "sos_goto"
				input_execute = "@if_less_than_3.output"
				input_goto_operator = "if_less_than_3"
			},
			
			{
				name = "***success_DONE:"
				operator = "util_print_float"
				input = "0.000000"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_goto_namespace_operator_import = 
	{
		operators = 
		[
			
			{
				name = "target_op"
				operator = "util_print_float"
				input = "666"
			},
			
			{
				name = "goto_operator"
				execute_once = "true"
				operator = "sos_goto"
				input_goto_operator = "target_op"
				use_local_namespace = "true"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_goto_namespace_operator = 
	{
		operators = 
		[
			
			{
				name = "import_goto_namespace"
				operator = "sos_import_stack"
				import_stack = "test_goto_namespace_operator_import"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_soundevent_limiter_lfo = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					max_count = 
					{
						data_type = "float"
						value = "0.000000"
					}
					match_substring = 
					{
						data_type = "float"
						value = "0.000000"
					}
					invert_match = 
					{
						data_type = "float"
						value = "0.000000"
					}
				}
			},
			
			{
				name = "test_soundevent_limiter_lfo"
				operator = "soundevent_limiter"
				execute_once = "true"
				match_event_name = "lfo"
				input_max_events = "@public.max_count"
				match_substring = "@public.match_substring"
				invert_match = "@public.invert_match"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_soundevent_control_lfo_stop_at_time = 
	{
		operators = 
		[
			
			{
				name = "import_stop_at_time"
				operator = "sos_import_stack"
				import_stack = "core_stop_at_time"
				operator_variables = 
				{
					time = 
					{
						value = "4.000000"
					}
				}
			},
			
			{
				name = "import_lfo"
				operator = "sos_import_stack"
				import_stack = "update_test_start_vsnd_lfo"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_soundevent_block = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					duration = 
					{
						data_type = "float"
						value = "5.000000"
					}
					match_substring = 
					{
						data_type = "float"
						value = "1.000000"
					}
					match_event_name = 
					{
						data_type = "string"
						value = "Diagnostic"
					}
				}
			},
			
			{
				name = "test_soundevent_block"
				operator = "soundevent_block_test"
				event_name = "@public.match_event_name"
				input_event_type = "3"
				input_entity_index = "666"
			},
			
			{
				name = "set_soundevent_block"
				operator = "soundevent_block"
				input_duration = "@public.duration"
				match_substring = "@public.match_substring"
				match_event_name = "@public.match_event_name"
				match_this_event = "true"
				input_event_type = "3"
				input_entity_index = "666"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_soundevent_start_oneshot = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					duration = 
					{
						data_type = "float"
						value = "5.000000"
					}
					test_value = 
					{
						data_type = "float"
						value = "6.111000"
					}
					test_value2 = 
					{
						data_type = "float"
						value = "6.222000"
					}
					test_value3 = 
					{
						data_type = "float"
						value = "6.333000"
					}
					test_value4 = 
					{
						data_type = "float"
						value = "6.444000"
					}
				}
			},
			
			{
				name = "test_soundevent_start"
				operator = "soundevent_start"
				input_start = "1.000000"
				soundevent_name = "Diagnostic.core_start_simple_oneshot"
				pass_opvar_args = "true"
				input_update_opvar1 = "1"
				input_update_opvar2 = "0"
				input_update_opvar3 = "1"
				input_update_opvar4 = "0"
				operator_variables = 
				{
					public.test_print = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.test_value"
					}
					public.test_print2 = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.test_value2"
					}
					public.test_print3 = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.test_value3"
					}
				}
			},
			
			{
				name = "test_soundevent_param"
				operator = "soundevent_param"
				input_guid = "@test_soundevent_start.output_current_guid"
				operator_variables = 
				{
					public.test_print4 = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.test_value4"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_soundevent_start_lfo = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					time = 
					{
						data_type = "float"
						value = "8.000000"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "stop_time"
				operator = "math_float"
				apply = "greater_than"
				input2 = "@get_event_info.output_elapsed_time"
				input1 = "@public.time"
			},
			
			{
				name = "test_soundevent_start"
				operator = "soundevent_start"
				input_start = "@stop_time.output"
				soundevent_name = "Diagnostic.test_stop_soundevents_lfo_at_time"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_soundevent_start_opvar_get_ancestor = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					duration = 
					{
						data_type = "float"
						value = "5.000000"
					}
				}
			},
			
			{
				name = "update_test_opvar_null"
				operator = "util_null"
				operator_variables = 
				{
					test_float_field = 
					{
						data_type = "float"
						value = "1111.000000"
					}
				}
			},
			
			{
				name = "test_soundevent_start"
				operator = "soundevent_start"
				input_start = "1.000000"
				soundevent_name = "Diagnostic.test_soundevent_start_opvar_get_parent"
				operator_variables = 
				{
					test_float_field = 
					{
						data_type = "float"
						value = "2222.000000"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_soundevent_start_opvar_get_parent = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					duration = 
					{
						data_type = "float"
						value = "5.000000"
					}
				}
			},
			
			{
				name = "update_test_opvar_null"
				operator = "util_null"
				operator_variables = 
				{
					test_float_field = 
					{
						data_type = "float"
						value = "3333.000000"
					}
				}
			},
			
			{
				name = "test_soundevent_start"
				operator = "soundevent_start"
				input_start = "1.000000"
				soundevent_name = "Diagnostic.update_test_opvar"
				operator_variables = 
				{
					test_float_field = 
					{
						data_type = "float"
						value = "4444.000000"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_opvar = 
	{
		operators = 
		[
			
			{
				name = "update_test_opvar_null"
				operator = "util_null"
				operator_variables = 
				{
					test_float_field = 
					{
						data_type = "float"
						value = "666.000000"
					}
				}
			},
			
			{
				name = "update_test_opvar_get"
				operator = "opvar_get_float"
				input_stack_name = "diagnostic_globals"
				input_operator_name = "test_opvars"
				input_field_name = "test_float"
				input_use_namespace = "false"
			},
			
			{
				name = "update_test_opvar_set"
				input = "666"
				operator = "opvar_set_float"
				input_stack_name = "diagnostic_globals"
				input_operator_name = "test_opvars"
				input_field_name = "test_float"
			},
			
			{
				name = "update_test_opvar_get2"
				operator = "opvar_get_float"
				input_stack_name = "diagnostic_globals"
				input_operator_name = "test_opvars"
				input_field_name = "test_float"
				input_use_namespace = "false"
			},
			
			{
				name = "update_test_opvar_increment"
				input = "10"
				operator = "opvar_increment_float"
				input_stack_name = "diagnostic_globals"
				input_operator_name = "test_opvars"
				input_field_name = "test_float"
			},
			
			{
				name = "update_test_opvar_get3"
				operator = "opvar_get_float"
				input_stack_name = "diagnostic_globals"
				input_operator_name = "test_opvars"
				input_field_name = "test_float"
				input_use_namespace = "false"
			},
			
			{
				name = "update_test_local_opvar_set"
				input = "999"
				operator = "opvar_set_float"
				input_stack_name = ""
				input_operator_name = "update_test_opvar_null"
				input_field_name = "test_float_field"
				input_use_namespace = "true"
			},
			
			{
				name = "update_test_local_opvar_get"
				operator = "opvar_get_float"
				input_stack_name = ""
				input_operator_name = "update_test_opvar_null"
				input_field_name = "test_float_field"
				input_use_namespace = "true"
			},
			
			{
				name = "update_test_parent_opvar_get"
				operator = "opvar_get_float"
				input_stack_name = ""
				input_operator_name = "update_test_opvar_null"
				input_field_name = "test_float_field"
				input_use_namespace = "false"
				input_get_parent = "true"
			},
			
			{
				name = "update_test_parent_soundevent_start_opvar_get"
				operator = "opvar_get_float"
				input_stack_name = ""
				input_operator_name = ""
				input_field_name = "test_float_field"
				input_use_namespace = "false"
				input_get_parent = "true"
			},
			
			{
				name = "update_test_parent_soundevent_start_opvar_set"
				input = "1111"
				operator = "opvar_set_float"
				input_stack_name = ""
				input_operator_name = ""
				input_field_name = "test_float_field"
				input_use_namespace = "false"
				input_get_parent = "true"
			},
			
			{
				name = "update_test_parent_soundevent_start_opvar_get2"
				operator = "opvar_get_float"
				input_stack_name = ""
				input_operator_name = ""
				input_field_name = "test_float_field"
				input_use_namespace = "false"
				input_get_parent = "true"
			},
			
			{
				name = "update_test_ancestor_opvar_get"
				operator = "opvar_get_float"
				input_stack_name = ""
				input_operator_name = "update_test_opvar_null"
				input_field_name = "test_float_field"
				input_use_namespace = "false"
				input_get_ancestor = "true"
			},
			
			{
				name = "update_test_ancestor_soundevent_start_opvar_get"
				operator = "opvar_get_float"
				input_stack_name = ""
				input_operator_name = ""
				input_field_name = "test_float_field"
				input_use_namespace = "false"
				input_get_ancestor = "true"
			},
			
			{
				name = "update_test_ancestor_soundevent_start_opvar_set"
				input = "6666"
				operator = "opvar_set_float"
				input_stack_name = ""
				input_operator_name = ""
				input_field_name = "test_float_field"
				input_use_namespace = "false"
				input_get_ancestor = "true"
			},
			
			{
				name = "update_test_ancestor_soundevent_start_opvar_get2"
				operator = "opvar_get_float"
				input_stack_name = ""
				input_operator_name = ""
				input_field_name = "test_float_field"
				input_use_namespace = "false"
				input_get_ancestor = "true"
			},
			
			{
				name = "update_test_get_array_max_value"
				operator = "opvar_get_float"
				input_stack_name = "diagnostic_globals"
				input_operator_name = "test_opvars"
				input_field_name = "test_array_max_value"
				input_use_namespace = "false"
				array_selection_type = "max_value"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	update_test_opvar_types = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					test_enum_field = 
					{
						data_type = "enum"
						enum_decl = 
						{
							value = 
							[
								"one",
								"two",
								"three",
								"four",
								"five",
							]
						}
						value = "three"
					}
					test_bool_field = 
					{
						data_type = "bool"
						value = "666.000000"
					}
					test_float_field = 
					{
						data_type = "float"
						value = "666.000000"
					}
					test_float2_field = 
					{
						data_type = "float2"
						value = "[666.000000, 777]"
					}
					test_float3_field = 
					{
						data_type = "float3"
						value = "[666.000000, 777, 888]"
					}
					test_float4_field = 
					{
						data_type = "float4"
						value = "[666.000000, 777, 888, 999]"
					}
					test_float6_field = 
					{
						data_type = "float6"
						value = "[666.000000, 777, 888, 999, 000, 111]"
					}
					test_int_field = 
					{
						data_type = "int"
						value = "666.000000"
					}
					test_uint32_field = 
					{
						data_type = "uint32"
						value = "666.000000"
					}
					test_uint64_field = 
					{
						data_type = "uint64"
						value = "666.000000"
					}
				}
			},
			
			{
				name = "**BEFORE_float:"
				input_execute = "1"
				operator = "util_print_float"
				input = "@public.test_float_field"
			},
			
			{
				name = "update_test_opvar_set_float"
				input = "6"
				operator = "opvar_set_float"
				input_operator_name = "public"
				input_field_name = "test_float_field"
			},
			
			{
				name = "**AFTER_float:"
				input_execute = "1"
				operator = "util_print_float"
				input = "@public.test_float_field"
			},
			
			{
				name = "**BEFORE_bool:"
				input_execute = "1"
				operator = "util_print_float"
				input = "@public.test_bool_field"
			},
			
			{
				name = "update_test_opvar_set_bool"
				input = "6"
				operator = "opvar_set_float"
				input_operator_name = "public"
				input_field_name = "test_bool_field"
			},
			
			{
				name = "**AFTER_bool:"
				input_execute = "1"
				operator = "util_print_float"
				input = "@public.test_bool_field"
			},
			
			{
				name = "**BEFORE_enum:"
				input_execute = "1"
				operator = "util_print_float"
				input = "@public.test_enum_field"
			},
			
			{
				name = "update_test_opvar_set_enum"
				input = "6"
				operator = "opvar_set_float"
				input_operator_name = "public"
				input_field_name = "test_enum_field"
			},
			
			{
				name = "**AFTER_enum:"
				input_execute = "1"
				operator = "util_print_float"
				input = "@public.test_enum_field"
			},
			
			{
				name = "update_test_opvar_get_float"
				operator = "opvar_get_float"
				input_operator_name = "public"
				input_field_name = "test_enum_field"
			},
			
			{
				name = "**GET_enum:"
				input_execute = "1"
				operator = "util_print_float"
				input = "@update_test_opvar_get_float.output"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_get_parent_space = 
	{
		operators = 
		[
			
			{
				name = "update_test_get_parent_5"
				operator = "opvar_get_float"
				input_stack_name = ""
				input_operator_name = "public"
				input_field_name = "test_float"
				input_use_namespace = "true"
				input_get_parent = "true"
			},
			
			{
				name = "update_test_get_parent_space_NNNN"
				operator = "opvar_get_float"
				input_stack_name = ""
				input_operator_name = "public"
				input_field_name = "test_float"
				input_use_namespace = "true"
				input_get_parent = "true"
			},
			
			{
				name = "update_test_get_parent_5555"
				operator = "opvar_get_float"
				input_stack_name = ""
				input_operator_name = "update_test_opvar_null"
				input_field_name = "test_float_field"
				input_use_namespace = "true"
				input_get_parent = "true"
			},
			
			{
				name = "update_test_get_parent_6666"
				operator = "opvar_get_float"
				input_stack_name = ""
				input_operator_name = "update_test_opvar_null"
				input_field_name = "test_float_field"
				input_use_namespace = "false"
				input_get_parent = "true"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_soundevent_start_opvar_get_parent_space = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					test_float = 
					{
						data_type = "float"
						value = "5.000000"
					}
				}
			},
			
			{
				name = "update_test_opvar_null"
				operator = "util_null"
				operator_variables = 
				{
					test_float_field = 
					{
						data_type = "float"
						value = "5555.000000"
					}
				}
			},
			
			{
				name = "test_soundevent_start_A"
				operator = "soundevent_start"
				input_start = "1.000000"
				soundevent_name = "Diagnostic.test_get_parent_space"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_import_get_parent_space = 
	{
		operators = 
		[
			
			{
				name = "update_test_opvar_null"
				operator = "util_null"
				operator_variables = 
				{
					test_float_field = 
					{
						data_type = "float"
						value = "6666.000000"
					}
				}
			},
			
			{
				name = "get_parent_space_9999"
				operator = "sos_import_stack"
				import_stack = "test_soundevent_start_opvar_get_parent_space"
				operator_variables = 
				{
					test_float = 
					{
						value = "9999.000000"
					}
				}
			},
			
			{
				name = "get_parent_space_4444"
				operator = "sos_import_stack"
				import_stack = "test_soundevent_start_opvar_get_parent_space"
				operator_variables = 
				{
					test_float = 
					{
						value = "4444.000000"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_random_multiple = 
	{
		operators = 
		[
			
			{
				name = "update_test_rand1"
				operator = "math_random_float"
			},
			
			{
				name = "update_test_rand2"
				operator = "math_random_float"
			},
			
			{
				name = "update_test_rand3"
				operator = "math_random_float"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_import_random_multiple = 
	{
		operators = 
		[
			
			{
				name = "import_rand1"
				operator = "sos_import_stack"
				import_stack = "test_random_multiple"
			},
			
			{
				name = "import_rand2"
				operator = "sos_import_stack"
				import_stack = "test_random_multiple"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_soundevent_start_random_multiple = 
	{
		operators = 
		[
			
			{
				name = "test_soundevent_start"
				operator = "soundevent_start"
				input_start = "1.000000"
				soundevent_name = "Diagnostic.test_random_multiple"
				input_use_parent_seed = "1.000000"
			},
			
			{
				name = "test_soundevent_start2"
				operator = "soundevent_start"
				input_start = "1.000000"
				soundevent_name = "Diagnostic.test_random_multiple"
				input_use_parent_seed = "1.000000"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_beep_on_track = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					track = 
					{
						data_type = "string"
						value = "default_track"
					}
					sync_track = 
					{
						data_type = "string"
						value = "none"
					}
					sync_field = 
					{
						data_type = "string"
						value = "none"
					}
					start_point = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = "0.000000"
					}
					end_point = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = "0.000000"
					}
					sync_points = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"0.000000",
							"1.000000",
						]
					}
					priority = 
					{
						data_type = "float"
						value = "0.000000"
					}
					priority_override = 
					{
						data_type = "float"
						value = "0.000000"
					}
					block_equal_priority = 
					{
						data_type = "float"
						value = "0.000000"
					}
					pitch = 
					{
						data_type = "float"
						value = "1.000000"
					}
				}
			},
			
			{
				name = "test_soundevent_start"
				operator = "track_queue"
				input_track_name = "@public.track"
				priority_override = "@public.priority_override"
				block_equal_priority = "@public.block_equal_priority"
				input_priority = "@public.priority"
				input_sync_track_name = "@public.sync_track"
				input_sync_field_name = "@public.sync_field"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "start"
				operator = "math_float"
				apply = "less_than"
				input1 = "@get_event_info.output_elapsed_time"
				input2 = "100"
			},
			
			{
				name = "not_start"
				operator = "math_float"
				apply = "sub"
				input2 = "@start.output"
				input1 = "1.000000"
			},
			
			{
				name = "start_beeper"
				input_execute = "@start.output"
				operator = "sos_import_stack"
				import_stack = "diagnostic.timed_beeper"
				operator_variables = 
				{
					interval = 
					{
						value = "0.50000"
					}
					pitch = 
					{
						value = "0.900000"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_vsnd_on_track = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					track = 
					{
						data_type = "string"
						value = ""
					}
					sync_track = 
					{
						data_type = "string"
						value = "none"
					}
					sync_field = 
					{
						data_type = "string"
						value = "none"
					}
					wait_for_track = 
					{
						data_type = "float"
						value = "1.000000"
					}
					sync_points = 
					{
						soundevent_data = "true"
						data_type = "float"
						value = 
						[
							"10000.000000",
						]
					}
					priority = 
					{
						data_type = "float"
						value = "0.000000"
					}
					priority_override = 
					{
						data_type = "float"
						value = "0.000000"
					}
					block_equal_priority = 
					{
						data_type = "float"
						value = "0.000000"
					}
					pitch = 
					{
						data_type = "float"
						value = "1.000000"
					}
					vsnd_files = 
					{
						data_type = "vsnd"
						soundevent_data = "true"
						value = "sounds/common/null.vsnd"
					}
				}
			},
			
			{
				name = "test_soundevent_start"
				operator = "track_queue"
				input_track_name = "@public.track"
				priority_override = "@public.priority_override"
				block_equal_priority = "@public.block_equal_priority"
				input_priority = "@public.priority"
				input_sync_track_name = "@public.sync_track"
				input_sync_field_name = "@public.sync_field"
				wait_for_track = "@public.wait_for_track"
			},
			
			{
				name = "update_test_start_vsnd_rand_oneshot"
				operator = "sos_import_stack"
				import_stack = "update_test_start_vsnd_rand_oneshot"
				operator_variables = 
				{
					vsnd_files = 
					{
						value = "@public.vsnd_files"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_stop_track = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					track = 
					{
						data_type = "string"
						value = "default_track"
					}
				}
			},
			
			{
				name = "stop_track"
				operator = "track_stop"
				input_track_name = "@public.track"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_soundevent_field_override = 
	{
		operators = 
		[
			
			{
				name = "notpublic"
				operator = "util_null"
				operator_variables = 
				{
					test1 = 
					{
						data_type = "float"
						value = "1.000000"
					}
					test2 = 
					{
						data_type = "float"
						value = "2.000000"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_vmix_voice_sends = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					volume = 
					{
						data_type = "float"
						value = "1.000000"
					}
					balance = 
					{
						data_type = "float"
						value = "1.000000"
					}
					vgraph = 
					{
						data_type = "string"
						value = "test.mix8"
					}
					track1 = 
					{
						data_type = "string"
						value = "sounds/misc/null.vsnd"
					}
					track2 = 
					{
						data_type = "string"
						value = "sounds/misc/null.vsnd"
					}
					vsnd_files1 = 
					{
						data_type = "vsnd"
						value = "sounds/misc/null.vsnd"
					}
					vsnd_files2 = 
					{
						data_type = "vsnd"
						value = "sounds/misc/null.vsnd"
					}
					volume_test_input = 
					{
						data_type = "float"
						value = "1.000000"
					}
					memory_type = 
					{
						data_type = "float"
						value = "0"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "set_builtins"
				operator = "sos_set_builtins"
				input_voicegraph = "@public.vgraph"
			},
			
			{
				name = "volume_fan"
				operator = "util_float_to_speakers"
				input = "@public.volume"
			},
			
			{
				name = "speakers_limit"
				operator = "math_speakers"
				apply = "mult"
				left_front = "1.000000"
				right_front = "0.666000"
				center = "1.000000"
				lfe = "0.666000"
				left_rear = "1.000000"
				right_rear = "0.666000"
				input2 = "@volume_fan.output"
			},
			
			{
				name = "start_vmix"
				operator = "vmix_voice_start"
				input_track1 = "@public.track1"
				input_track2 = "@public.track2"
				input_vsnd1 = "@public.vsnd_files1"
				input_vsnd2 = "@public.vsnd_files2"
				execute_once = "false"
				input_execute = "1.000000"
				input_start = "@get_event_info.output_unstopped"
				input_speaker_volumes = "@speakers_limit.output"
				input_pitch = "1.000000"
				input_memory_type = "@public.memory_type"
			},
			
			{
				name = "allvoices_submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1.0"
				input = "1.0"
				submix_name = "AllVoices"
				send_type = "named"
			},
			
			{
				name = "amped_bus_voices_submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1.0"
				input = "0.0"
				submix_name = "amped_buss"
				send_type = "named"
			},
		]
	}
	test_vmix_8track = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					volume = 
					{
						data_type = "float"
						value = "1.000000"
					}
					balance = 
					{
						data_type = "float"
						value = "1.000000"
					}
					vgraph = 
					{
						data_type = "string"
						value = "test.mix8"
					}
					input = 
					{
						data_type = "string"
						value = "test_input"
					}
					track1 = 
					{
						data_type = "string"
						value = "sounds/misc/null.vsnd"
					}
					track2 = 
					{
						data_type = "string"
						value = "sounds/misc/null.vsnd"
					}
					track3 = 
					{
						data_type = "string"
						value = "sounds/misc/null.vsnd"
					}
					track4 = 
					{
						data_type = "string"
						value = "sounds/misc/null.vsnd"
					}
					track5 = 
					{
						data_type = "string"
						value = "sounds/misc/null.vsnd"
					}
					track6 = 
					{
						data_type = "string"
						value = "sounds/misc/null.vsnd"
					}
					track7 = 
					{
						data_type = "string"
						value = "sounds/misc/null.vsnd"
					}
					track8 = 
					{
						data_type = "string"
						value = "sounds/misc/null.vsnd"
					}
					vsnd_files1 = 
					{
						data_type = "vsnd"
						value = "sounds/misc/null.vsnd"
					}
					vsnd_files2 = 
					{
						data_type = "vsnd"
						value = "sounds/misc/null.vsnd"
					}
					vsnd_files3 = 
					{
						data_type = "vsnd"
						value = "sounds/misc/null.vsnd"
					}
					vsnd_files4 = 
					{
						data_type = "vsnd"
						value = "sounds/misc/null.vsnd"
					}
					vsnd_files5 = 
					{
						data_type = "vsnd"
						value = "sounds/misc/null.vsnd"
					}
					vsnd_files6 = 
					{
						data_type = "vsnd"
						value = "sounds/misc/null.vsnd"
					}
					vsnd_files7 = 
					{
						data_type = "vsnd"
						value = "sounds/misc/null.vsnd"
					}
					vsnd_files8 = 
					{
						data_type = "vsnd"
						value = "sounds/misc/null.vsnd"
					}
					volume_test_input = 
					{
						data_type = "float"
						value = "1.000000"
					}
					memory_type = 
					{
						data_type = "float"
						value = "0"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "volume_fan"
				operator = "util_float_to_speakers"
				input = "@public.volume"
			},
			
			{
				name = "speakers_limit"
				operator = "math_speakers"
				apply = "mult"
				left_front = "1.000000"
				right_front = "0.666000"
				center = "1.000000"
				lfe = "0.666000"
				left_rear = "1.000000"
				right_rear = "0.666000"
				input2 = "@volume_fan.output"
			},
			
			{
				name = "set_builtins"
				operator = "sos_set_builtins"
				input_voicegraph = "@public.vgraph"
			},
			
			{
				name = "start_vmix"
				operator = "vmix_voice_start"
				input_track1 = "@public.track1"
				input_track2 = "@public.track2"
				input_track3 = "@public.track3"
				input_track4 = "@public.track4"
				input_track5 = "@public.track5"
				input_track6 = "@public.track6"
				input_track7 = "@public.track7"
				input_track8 = "@public.track8"
				input_vsnd1 = "@public.vsnd_files1"
				input_vsnd2 = "@public.vsnd_files2"
				input_vsnd3 = "@public.vsnd_files3"
				input_vsnd4 = "@public.vsnd_files4"
				input_vsnd5 = "@public.vsnd_files5"
				input_vsnd6 = "@public.vsnd_files6"
				input_vsnd7 = "@public.vsnd_files7"
				input_vsnd8 = "@public.vsnd_files8"
				execute_once = "false"
				input_execute = "1.000000"
				input_start = "@get_event_info.output_unstopped"
				input_speaker_volumes = "@speakers_limit.output"
				input_pitch = "1.000000"
				input_memory_type = "@public.memory_type"
			},
			
			{
				name = "send_voicegraph_value"
				operator = "vmix_voicegraph_input"
				input_name = "volume_test"
				input = "@public.volume_test_input"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_vmix_vsnd_info = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					vsnd_files = 
					{
						data_type = "vsnd"
						value = "sounds/misc/null.vsnd"
					}
				}
			},
			
			{
				name = "get_vsnd"
				operator = "opvar_get_vsnd"
				execute_once = "true"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "vsnd_files"
				input_use_namespace = "false"
				array_selection_type = "random"
			},
			
			{
				name = "vsnd_info"
				operator = "vmix_vsnd_info"
				input_vsnd = "@get_vsnd.output"
			},
			
			{
				name = "**DURATION:"
				input_execute = "1"
				operator = "util_print_float"
				input = "@vsnd_info.output_duration"
			},
			
			{
				name = "volume_fan"
				operator = "util_float_to_speakers"
				input = "1"
			},
			
			{
				name = "start_vsnd"
				operator = "vmix_voice_start"
				input_vsnd1 = "@get_vsnd.output"
				execute_once = "false"
				input_execute = "1.000000"
				input_start = "1"
				input_speaker_volumes = "@volume_fan.output"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_enum_opvar = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					math_enum = 
					{
						data_type = "enum"
						enum_field = "math_float.apply"
						value = "mult"
					}
				}
			},
			
			{
				name = "math_test"
				operator = "math_float"
				apply = "@public.math_enum"
				input1 = "1"
				input2 = "2"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_simple_public_field = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					test_float_for_import_1.111 = 
					{
						data_type = "float"
						value = "1.111000"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_import_opvar_field = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					import_public_field_test = 
					{
						data_type = "public_opvar"
						value = "test_simple_public_field"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_system_properties = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					start = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					volume = 
					{
						data_type = "float"
						value = "1.000000"
					}
					volume_rand_min = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					volume_rand_max = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					pitch = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					pitch_rand_min = 
					{
						data_type = "float"
						value = "-0.050000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					pitch_rand_max = 
					{
						data_type = "float"
						value = "0.050000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					vsnd_files = 
					{
						data_type = "vsnd"
						value = "sounds/common/null.vsnd"
					}
					memory_type = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "locked"
						}
					}
				}
			},
			
			{
				name = "volume_random"
				operator = "math_randomize_float"
				execute_once = "true"
				input = "1"
				input_rand_min = "@public.volume_rand_min"
				input_rand_max = "@public.volume_rand_max"
			},
			
			{
				name = "pitch_random"
				operator = "math_randomize_float"
				execute_once = "true"
				input = "@public.pitch"
				input_rand_min = "@public.pitch_rand_min"
				input_rand_max = "@public.pitch_rand_max"
			},
			
			{
				name = "volume_mult"
				operator = "math_float"
				apply = "mult"
				input1 = "@public.volume"
				input2 = "@volume_random.output"
			},
			
			{
				name = "volume_fan"
				operator = "util_float_to_speakers"
				execute_once = "true"
				input = "@volume_mult.output"
			},
			
			{
				name = "start_vsnd"
				operator = "vmix_voice_start"
				input_vsnd1 = "@public.vsnd_files"
				execute_once = "false"
				input_execute = "@public.start"
				input_start = "@public.start"
				input_speaker_volumes = "@volume_fan.output"
				input_pitch = "@pitch_random.output"
				input_memory_type = "@public.memory_type"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_entity_aabb = 
	{
		operators = 
		[
			
			{
				name = "source_info_test"
				operator = "game_get_source_info"
			},
			
			{
				name = "get_aabb_test"
				input_execute = "1.000000"
				operator = "game_entity_world_aabb"
				input_entity_index = "@source_info_test.output_entity_index"
			},
			
			{
				name = "test_aabb_01"
				operator = "util_draw_radius"
				input_radius_min = "1.000000"
				input_name = "min"
				input_position = "@get_aabb_test.output_pos_min"
			},
			
			{
				name = "test_aabb_02"
				operator = "util_draw_radius"
				input_radius_min = "1.000000"
				input_name = "max"
				input_position = "@get_aabb_test.output_pos_max"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_inverse_vec3 = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					position = 
					{
						data_type = "float3"
						value = "[0.0, 0.0, 0.0]"
						_system_properties = 
						{
							display_group = "locked"
							display_edit_type = "field_position_editor"
						}
					}
				}
			},
			
			{
				name = "globals"
				operator = "get_system_globals"
				input_execute = "1"
				input_listener_index = "0"
			},
			
			{
				name = "inverse_vec3"
				operator = "math_calc_directional_vec3"
				execute_once = "false"
				input_start_position = "@public.position"
				input_center_position = "@globals.output_listener_front"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "inverse_vec3_01"
				operator = "util_draw_radius"
				input_radius_max = "10.000000"
				input_name = "src"
				input_position = "@public.position"
			},
			
			{
				name = "inverse_vec3_02"
				operator = "util_draw_radius"
				input_radius_min = "10.000000"
				input_name = "result"
				input_position = "@inverse_vec3.output"
			},
			
			{
				name = "add_dependent"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	test_soundevent_groups = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					on = 
					{
						data_type = "float"
						value = "1.000000"
					}
					limiter_max = 
					{
						data_type = "float"
						value = "2.000000"
					}
					limit_opvar = 
					{
						data_type = "float"
						value = "0.000000"
					}
					event_type = 
					{
						data_type = "float"
						value = "666"
					}
					entity_index = 
					{
						data_type = "float"
						value = "0"
					}
					match_this = 
					{
						data_type = "float"
						value = "0"
					}
					lifespan = 
					{
						data_type = "float"
						value = "-1"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "branch_eventtype"
				execute_once = "true"
				operator = "soundevent_group_join"
				input_group_name = "branch_eventtype"
				input_match_float = "@public.event_type"
				input_lifespan_time = "@public.lifespan"
			},
			
			{
				name = "find_branch_eventtype"
				execute_once = "true"
				input_execute = "1"
				operator = "soundevent_group_find"
				input_group_name = "branch_eventtype"
			},
			
			{
				name = "count_find_branch_eventtype"
				operator = "soundevent_group_info"
				input_execute = "1"
				input_group_result = "@branch_eventtype.output_result"
			},
			
			{
				name = "**match_count"
				input_execute = "1"
				operator = "util_print_float"
				input = "@count_find_branch_eventtype.output_match_count"
			},
			
			{
				name = "**match_time"
				input_execute = "1"
				operator = "util_print_float"
				input = "@count_find_branch_eventtype.output_match_time"
			},
			
			{
				name = "add_dependent"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	test_groups_subname_invert = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					invert = 
					{
						data_type = "float"
						value = "0.000000"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "match_name"
				execute_once = "true"
				operator = "soundevent_group_join"
				input_group_name = "match_subname"
				input_invert_match = "@public.invert"
			},
			
			{
				name = "match_name_invert"
				execute_once = "true"
				operator = "soundevent_group_join"
				input_group_name = "match_subname_invert"
				input_invert_match = "@public.invert"
			},
			
			{
				name = "add_dependent"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	test_groups_entindex_invert = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					invert = 
					{
						data_type = "float"
						value = "0.000000"
					}
					entity_index = 
					{
						data_type = "float"
						value = "777"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "match_entityindex"
				execute_once = "true"
				operator = "soundevent_group_join"
				input_group_name = "match_entityindex"
				input_entity_index = "@public.entity_index"
				input_invert_match = "@public.invert"
			},
			
			{
				name = "add_dependent"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	test_groups_opvar_invert = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					invert = 
					{
						data_type = "float"
						value = "0.000000"
					}
					opvar = 
					{
						data_type = "float"
						value = "666"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "match_opvar"
				execute_once = "true"
				operator = "soundevent_group_join"
				input_group_name = "match_eventtype"
				input_match_float = "@public.opvar"
				input_invert_match = "@public.invert"
			},
			
			{
				name = "match_opvar_invert"
				execute_once = "true"
				operator = "soundevent_group_join"
				input_group_name = "match_opvar_invert"
				input_match_float = "@public.opvar"
				input_invert_match = "@public.invert"
			},
			
			{
				name = "add_dependent"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	test_groups_persist = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					invert = 
					{
						data_type = "float"
						value = "0.000000"
					}
					opvar = 
					{
						data_type = "float"
						value = "666"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "match_opvar"
				execute_once = "true"
				operator = "soundevent_group_join"
				input_group_name = "match_all_persists"
			},
			
			{
				name = "add_dependent"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	test_groups_envelope = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "match_all"
				execute_once = "true"
				operator = "soundevent_group_join"
				input_group_name = "match_all_count_envelope"
				input_lifespan_time = 4
			},
			
			{
				name = "get_envelope_kv3"
				execute_once = "false"
				operator = "soundevent_group_get_float"
				input_group_result = "@match_all.output_result"
				input_name = "envelope_result"
			},
			
			{
				name = "ENV: "
				operator = "util_print_float"
				input = "@get_envelope_kv3.output"
			},
			
			{
				name = "add_dependent"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	test_groups_branch_string = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					string = 
					{
						data_type = "string"
						value = "string_test1"
					}
					string2 = 
					{
						data_type = "string"
						value = "string_test2"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "branch_opvar_string"
				execute_once = "true"
				operator = "soundevent_group_join"
				input_group_name = "branch_opvar_string"
				input_match_string = "@public.string"
			},
			
			{
				name = "branch_opvar_string2"
				execute_once = "true"
				operator = "soundevent_group_join"
				input_group_name = "branch_opvar_string"
				input_match_string = "@public.string2"
			},
			
			{
				name = "add_dependent"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	test_groups_branch_string_variables = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "branch_opvar_string"
				execute_once = "true"
				operator = "soundevent_group_join"
				input_group_name = "branch_opvar_string"
				input_match_string = "branch1"
			},
			
			{
				name = "set_group1_variable1"
				execute_once = "true"
				operator = "soundevent_group_set_float"
				input_group_result = "@branch_opvar_string.output_result"
				input_name = "grp1_var1"
				input = "1"
			},
			
			{
				name = "set_group1_variable1b"
				execute_once = "true"
				operator = "soundevent_group_set_float"
				input_group_result = "@branch_opvar_string.output_result"
				input_name = "grp1_var1"
				input = "1.1"
			},
			
			{
				name = "get_group1_variable1"
				execute_once = "true"
				operator = "soundevent_group_get_float"
				input_group_result = "@branch_opvar_string.output_result"
				input_name = "grp1_var1"
			},
			
			{
				name = "GRP1_VAR1"
				operator = "util_print_float"
				input = "@get_group1_variable1.output"
			},
			
			{
				name = "set_group1_variable2"
				execute_once = "true"
				operator = "soundevent_group_set_float"
				input_group_result = "@branch_opvar_string.output_result"
				input_name = "grp1_var2"
				input = "1"
			},
			
			{
				name = "set_group1_variable2b"
				execute_once = "true"
				operator = "soundevent_group_set_float"
				input_group_result = "@branch_opvar_string.output_result"
				input_name = "grp1_var2"
				input = "2.2"
			},
			
			{
				name = "get_group1_variable2"
				execute_once = "true"
				operator = "soundevent_group_get_float"
				input_group_result = "@branch_opvar_string.output_result"
				input_name = "grp1_var2"
			},
			
			{
				name = "GRP1_VAR2"
				operator = "util_print_float"
				input = "@get_group1_variable2.output"
			},
			
			{
				name = "branch_opvar_string2"
				execute_once = "true"
				operator = "soundevent_group_join"
				input_group_name = "branch_opvar_string"
				input_match_string = "branch2"
			},
			
			{
				name = "add_dependent"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	test_groups_read_envelope = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "find_envelope_group"
				execute_once = "true"
				operator = "soundevent_group_find"
				input_group_name = "match_all_envelope"
			},
			
			{
				name = "get_envelope"
				execute_once = "true"
				operator = "soundevent_group_get_float"
				input_group_result = "@find_envelope_group.output_result"
				input_name = "envelope_result"
			},
			
			{
				name = "GRP1_VAR1"
				operator = "util_print_float"
				input = "@get_envelope.output"
			},
			
			{
				name = "add_dependent"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
	}
	test_soundevent_group_simple = 
	{
		operators = 
		[
			
			{
				name = "add_dependent"
				operator = "soundevent_control"
				input_add_dependent = "1"
			},
		]
	}
	test_group_stop = 
	{
		operators = 
		[
			
			{
				name = "stop_group"
				execute_once = "true"
				operator = "soundevent_group_stop"
				input_group_name = "static_group3"
			},
		]
	}
	test_LFO = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					frequency = 
					{
						data_type = "float"
						value = "1.000000"
					}
					scale = 
					{
						data_type = "float"
						value = "1.000000"
					}
					center = 
					{
						data_type = "float"
						value = "0.000000"
					}
					wave_type = 
					{
						data_type = "enum"
						enum_field = "mod_lfo.wave_type"
						value = "sin"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "LFO"
				operator = "mod_LFO"
				wave_type = "@public.wave_type"
				input_frequency = "@public.frequency"
				input_scale = "@public.scale"
				input_center = "@public.center"
			},
			
			{
				name = "update_test_print_float"
				operator = "util_print_float"
				input = "@LFO.output"
			},
			
			{
				name = "add_dependent"
				input_execute = "@get_event_info.output_unstopped"
				input_add_dependent = "@get_event_info.output_unstopped"
				operator = "soundevent_control"
			},
		]
	}
	Diagnostic.TestCurve2d = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					input = 
					{
						data_type = "float"
						value = "0.000000"
					}
					curve = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 0.0, 0, 0, 0, 0 ]",
							"[ 0.0, 1.0, 0, 0, 0, 0 ]",
						]
						_system_properties = 
						{
							display_edit_type = "field_curve_2d_editor"
						}
					}
					curve_4knot_array = 
					{
						data_type = "float8"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 0.0, 0.33, 0.0, 0.66, 0, 1.0, 0 ]",
							"[ 0.0, 0.5, 0.33, 0.5, 0.66, 0.5, 1.0, 0.5 ]",
							"[ 0.0, 1.0, 0.33, 1, 0.66, 1, 1.0, 1.0 ]",
						]
						_system_properties = 
						{
							display_edit_type = "field_2d4knot_editor"
							vector_field = "public.curve_4knot_array"
							curve_type = "spline"
						}
					}
					curve_6knot_array = 
					{
						data_type = "float12"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 0.0, 0.33, 0.0, 0.5, 0, 0.66, 0, 0.75, 0, 1.0, 0.0 ]",
							"[ 0.0, 0.5, 0.33, 0.5, 0.5, 0.5, 0.66, 0.5, 0.75, 0.5, 1.0, 0.5 ]",
							"[ 0.0, 1, 0.33, 1, 0.5, 1, 0.66, 1, 0.75, 1, 1.0, 1 ]",
						]
						_system_properties = 
						{
							display_edit_type = "field_2d6knot_editor"
							vector_field = "public.curve_6knot_array"
							curve_type = "spline"
						}
					}
					curve_4knot_X1 = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_2d4knot_editor"
							x1_field = "public.curve_4knot_X1"
							x2_field = "public.curve_4knot_X2"
							x3_field = "public.curve_4knot_X3"
							x4_field = "public.curve_4knot_X4"
							y1_field = "public.curve_4knot_Y1"
							y2_field = "public.curve_4knot_Y2"
							y3_field = "public.curve_4knot_Y3"
							y4_field = "public.curve_4knot_Y4"
							curve_type = "spline"
						}
					}
					curve_4knot_Y1 = 
					{
						data_type = "float"
						value = "0.000000"
					}
					curve_4knot_X2 = 
					{
						data_type = "float"
						value = "0.33"
					}
					curve_4knot_Y2 = 
					{
						data_type = "float"
						value = "0.33"
					}
					curve_4knot_X3 = 
					{
						data_type = "float"
						value = "0.66"
					}
					curve_4knot_Y3 = 
					{
						data_type = "float"
						value = "0.66"
					}
					curve_4knot_X4 = 
					{
						data_type = "float"
						value = "1.0"
					}
					curve_4knot_Y4 = 
					{
						data_type = "float"
						value = "1.000000"
					}
				}
			},
			
			{
				name = "curve"
				operator = "math_curve_2d"
				input = "@public.input"
				public_field_name = "public.curve"
				input_scale_X = "1.000000"
				input_scale_Y = "1.000000"
			},
			
			{
				name = "remap_delay_distance"
				operator = "math_curve_2d_4knot"
				input_execute = "1"
				curve_type = "spline"
				execute_once = "1.000000"
				input = "@public.input"
				input_X1 = "@public.curve_4knot_X1"
				input_Y1 = "@public.curve_4knot_Y1"
				input_X2 = "@public.curve_4knot_X2"
				input_Y2 = "@public.curve_4knot_Y2"
				input_X3 = "@public.curve_4knot_X3"
				input_Y3 = "@public.curve_4knot_Y3"
				input_X4 = "@public.curve_4knot_X4"
				input_Y4 = "@public.curve_4knot_Y4"
			},
			
			{
				name = "update_test_print_float"
				input_execute = "1"
				operator = "util_print_float"
				input = "@curve.output"
			},
			
			{
				name = "get_curve1"
				operator = "opvar_get_float8"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "curve_4knot_array"
				array_selection_type = "index"
				input_index = "1"
			},
			
			{
				name = "curve_4knot_array1"
				operator = "math_curve_2d_4knot"
				input_execute = "1"
				input = "@public.input"
				curve_defintion_type = "vector"
				curve_type = "spline"
				execute_once = "1.000000"
				input_vector = "@get_curve1.output"
			},
			
			{
				name = "get_curve_6knot"
				operator = "opvar_get_float12"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "curve_6knot_array"
				array_selection_type = "index"
				input_index = "1"
			},
			
			{
				name = "curve_6knot_array"
				operator = "math_curve_2d_6knot"
				input_execute = "1"
				input = "@public.input"
				curve_type = "spline"
				execute_once = "1.000000"
				input_vector = "@get_curve_6knot.output"
			},
			
			{
				name = "update_test_print_arraycurve1"
				input_execute = "1"
				operator = "util_print_float"
				input = "@curve_4knot_array1.output"
			},
		]
	}
	Diagnostic.GetMixGraphInput = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					input_name = 
					{
						data_type = "string"
						value = "PlayerDSP"
					}
				}
			},
			
			{
				name = "get_input"
				operator = "vmix_mixgraph_input_get_float"
				input_name = "@public.input_name"
			},
			
			{
				name = "update_test_print_float"
				input_execute = "1"
				operator = "util_print_float"
				input = "@get_input.output"
			},
		]
	}
	Diagnostic.TestCrossfade = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					input = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_edit_type = "field_generic_float_editor"
							display_edit_min = "0.000000"
							display_edit_max = "1.500000"
						}
					}
					equal_power_amount = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_edit_type = "field_generic_float_editor"
							display_edit_min = "0.000000"
							display_edit_max = "1.500000"
						}
					}
				}
			},
			
			{
				name = "crossfade"
				operator = "math_crossfade_float"
				input = "@public.input"
				equal_power_amount = "@public.equal_power_amount"
			},
			
			{
				name = "***DRY"
				operator = "util_print_float"
				input = "@crossfade.output1"
			},
			
			{
				name = "***WET"
				operator = "util_print_float"
				input = "@crossfade.output2"
			},
		]
	}
	Diagnostic.test_mixgraph_output = 
	{
		operators = 
		[
			
			{
				name = "get_mixgraph_output"
				operator = "vmix_mixgraph_output_float"
				input_name = "main_mix_out"
			},
			
			{
				name = "**util_timer:"
				operator = "util_print_float"
				input = "@get_mixgraph_output.output"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	Diagnostic.register_sound_area = 
	{
		operators = 
		[
			
			{
				name = "register_area"
				execute_once = "true"
				operator = "sound_area_register"
				input_position = 
				[
					1.000000,
					0.000000,
					1.000000,
				]
				input_radius = 200.000000
				area_shape = "sphere"
				area_type = "ice_sphere"
			},
			
			{
				name = "register_area_2"
				execute_once = "true"
				operator = "sound_area_register"
				input_position = 
				[
					300.000000,
					0.000000,
					10.000000,
				]
				input_radius = 350.000000
				area_shape = "sphere"
				area_type = "ice_sphere"
			},
			
			{
				name = "register_area_3"
				execute_once = "true"
				operator = "sound_area_register"
				input_position = 
				[
					-400.000000,
					0.000000,
					10.000000,
				]
				input_radius = 250.000000
				area_shape = "sphere"
				area_type = "time_sphere"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "update_prevent_stop"
				operator = "soundevent_control"
				input_execute = "@get_event_info.output_unstopped"
				input_add_dependent = "1"
			},
			
			{
				name = "remove_area"
				input_execute = "@get_event_info.output_stopped"
				execute_once = "true"
				operator = "sound_area_unregister"
				input_guid = "@register_area.output_guid"
			},
			
			{
				name = "remove_area_2"
				input_execute = "@get_event_info.output_stopped"
				execute_once = "true"
				operator = "sound_area_unregister"
				input_guid = "@register_area_2.output_guid"
			},
			
			{
				name = "remove_area_3"
				input_execute = "@get_event_info.output_stopped"
				execute_once = "true"
				operator = "sound_area_unregister"
				input_guid = "@register_area_3.output_guid"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	Diagnostic.test_sound_area = 
	{
		operators = 
		[
			
			{
				name = "globals"
				operator = "get_system_globals"
				input_execute = "1"
				input_listener_index = "0"
			},
			
			{
				name = "test_point"
				input_execute = "1.0"
				execute_once = "true"
				operator = "sound_area_contains_point"
				input_position = "@globals.output_listener_position"
				area_type = "ice_sphere"
			},
			
			{
				name = "test_point_2"
				input_execute = "1.0"
				execute_once = "true"
				operator = "sound_area_contains_point"
				input_position = "@globals.output_listener_position"
				area_type = "any"
			},
			
			{
				name = "**ice_spheres_exist"
				input_execute = "@test_point.output_sound_areas_exist"
				operator = "util_print_string"
				input = ":thumbsup:"
			},
			
			{
				name = "**player_in_ice_sphere"
				input_execute = "@test_point.output_point_in_sound_area"
				operator = "util_print_string"
				input = ":thumbsup:"
			},
			
			{
				name = "**any_spheres_exist"
				input_execute = "@test_point_2.output_sound_areas_exist"
				operator = "util_print_string"
				input = ":thumbsup:"
			},
			
			{
				name = "**player_in_any_sphere"
				input_execute = "@test_point_2.output_point_in_sound_area"
				operator = "util_print_string"
				input = ":thumbsup:"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	Diagnostic.test_threshold_logic = 
	{
		operators = 
		[
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "pulse_value_sine"
				operator = "math_func_float"
				input1 = "@get_event_info.output_elapsed_time"
				function = "sin"
			},
			
			{
				name = "logic_01"
				operator = "ctrl_threshold_logic3"
				input_execute = "1"
				input = "@pulse_value_sine.output"
				threshold_type = "greater_than"
				input_threshold_low = 0.150000
				input_threshold_mid = 0.500000
				input_threshold_high = 0.750000
			},
			
			{
				name = "logic_02"
				operator = "ctrl_threshold_logic3"
				input_execute = "1"
				input = "@pulse_value_sine.output"
				threshold_type = "less_than"
				input_threshold_low = 0.150000
				input_threshold_mid = 0.500000
				input_threshold_high = 0.750000
			},
			
			{
				name = "logic_03"
				operator = "ctrl_threshold_logic3"
				input_execute = "1"
				input = "@pulse_value_sine.output"
				threshold_type = "greater_than_or_equal"
				input_threshold_low = 0.150000
				input_threshold_mid = 0.500000
				input_threshold_high = 0.750000
			},
			
			{
				name = "logic_04"
				operator = "ctrl_threshold_logic3"
				input_execute = "1"
				input = "@pulse_value_sine.output"
				threshold_type = "less_than_or_equal"
				input_threshold_low = 0.150000
				input_threshold_mid = 0.500000
				input_threshold_high = 0.750000
			},
			
			{
				name = "stop_time"
				operator = "math_float"
				apply = "less_than"
				input1 = "@get_event_info.output_elapsed_time"
				input2 = "2.0"
			},
			
			{
				name = "prevent_stop"
				operator = "soundevent_control"
				input_execute = "@stop_time.output"
				input_add_dependent = "1"
			},
		]
	}
	Diagnostic.test_wait_time = 
	{
		operators = 
		[
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "set_dependency"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
			
			{
				name = "set_wait"
				operator = "soundevent_control"
				input_wait_time = 5
			},
		]
	}
	Diagnostic.test_wait_time_test = 
	{
		operators = 
		[
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "set_dependency"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
			
			{
				name = "set_wait"
				operator = "soundevent_control"
				input_wait_time = 5
			},
		]
	}
	test_eval = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					expr = 
					{
						data_type = "string"
						value = "_1 + _2*_3 + 5"
					}
					input1 = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "Normal"
						}
					}
					input2 = 
					{
						data_type = "float"
						value = "2"
						_system_properties = 
						{
							display_group = "Normal"
						}
					}
					input3 = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "Normal"
						}
					}
					input4 = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "Normal"
						}
					}
					input5 = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "Normal"
						}
					}
					output_curve = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ -10, 0.0, 1.0, 1.0, 1.0, 1.0 ]",
							"[ 10.0, 0.0, 1.0, 1.0, 0.0, 1.0 ]",
						]
						_system_properties = 
						{
							display_group = "Normal"
							display_edit_type = "field_curve_2d_editor"
						}
					}
				}
			},
			
			{
				name = "eval_test"
				operator = "math_float_eval"
				execute_once = true
				expression = "@public.expr"
				input1 = "@public.input1"
				input2 = "@public.input2"
				input3 = "@public.input3"
				input4 = "@public.input4"
				input5 = "@public.input5"
			},
			
			{
				name = "curve_output"
				operator = "math_curve_2d"
				public_field_name = "public.output_curve"
				input = "@eval_test.output"
			},
			
			{
				name = "info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "control"
				operator = "soundevent_control"
				input_add_dependent = "@info.output_unstopped"
				input_clear_dependencies = "@info.output_stopped"
				input_stop_at_time = "3"
			},
		]
	}
	update_test_vsnd_envelope = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					vsnd_files = 
					{
						data_type = "vsnd"
						soundevent_data = "true"
						value = 
						[
							"sounds/diagnostics/enveloped_noise_01.vsnd",
						]
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "get_vsnd"
				operator = "opvar_get_vsnd"
				execute_once = "true"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "vsnd_files"
				input_use_namespace = "false"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "update_test_start_vsnd"
				operator = "vmix_voice_start"
				input_vsnd1 = "@get_vsnd.output"
				input_start = "@get_event_info.output_unstopped"
				input_speaker_volumes = "[ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ]"
			},
			
			{
				name = "sample_env_curve"
				operator = "container_sample_curve"
				input_time = "@get_event_info.output_elapsed_time"
				input_default = "0.0"
				input_container = "@get_vsnd.output"
			},
			
			{
				name = "***ENV:"
				operator = "util_print_float"
				input = "@sample_env_curve.output"
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
	test_empty = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					input1 = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "Normal"
						}
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "diagnostics"
		}
	}
}