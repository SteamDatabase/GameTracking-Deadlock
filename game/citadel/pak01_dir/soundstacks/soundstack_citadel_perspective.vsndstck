<!-- kv3 encoding:text:version{e21c7f3c-8a33-41c5-9977-a76d3a32aa0d} format:generic:version{7412167c-06e9-4698-aff2-e63eb59037e7} -->
{
	citadel_perspective_default = 
	{
		operators = 
		[
			
			{
				name = "_builtins"
				operator = "sos_builtins"
				_voicegraph = "citadel.hrtf_basic"
			},
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					citadel_default_3d = 
					{
						data_type = "public_opvar"
						value = "citadel_default_3d"
					}
					citadel_find_perspective = 
					{
						data_type = "public_opvar"
						value = "citadel_find_perspective"
					}
					citadel_enemy_audible_sound = 
					{
						data_type = "public_opvar"
						value = "citadel_enemy_audible_sound"
					}
					citadel_source_reverb_send = 
					{
						data_type = "public_opvar"
						value = "citadel_source_reverb_send"
					}
					mixer_mixlayer_volume_gate = 
					{
						data_type = "float"
						value = ".5"
						_system_properties = 
						{
							property_help = "Override from citadel_base_3d."
						}
					}
					limiter_global_volume_on = 
					{
						data_type = "bool"
						value = "true"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
							property_help = "Override from citadel_base_3d."
						}
					}
					limiter_global_volume_max = 
					{
						data_type = "float"
						value = "100.0"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
							property_help = "Override from citadel_base_3d."
						}
					}
					volume_falloff_min_player = 
					{
						data_type = "float"
						value = "99999.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Min volume falloff for player perspective. Perspective describes a sound's owning entity relationship to the local player."
						}
					}
					volume_falloff_min_team = 
					{
						data_type = "float"
						value = "200.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Min volume falloff for team perspective."
						}
					}
					volume_falloff_min_opponent = 
					{
						data_type = "float"
						value = "200.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Min volume falloff for opponent perspective."
						}
					}
					volume_falloff_min_neutral = 
					{
						data_type = "float"
						value = "200.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Min volume falloff for neutral perspective."
						}
					}
					volume_falloff_max_player = 
					{
						data_type = "float"
						value = "99999.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Max volume falloff for player perspective."
						}
					}
					volume_falloff_max_team = 
					{
						data_type = "float"
						value = "7000.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Max volume falloff for team perspective."
						}
					}
					volume_falloff_max_opponent = 
					{
						data_type = "float"
						value = "7000.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Max volume falloff for opponent perspective."
						}
					}
					volume_falloff_max_neutral = 
					{
						data_type = "float"
						value = "7000.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Max volume falloff for neutral perspective."
						}
					}
					volume_falloff_curve_db_player = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 6.619538, 0.0, -0.311869, -0.311869, 2.0, 3.0 ]",
							"[ 17.077585, -10.603477, -0.127606, -0.127606, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Volume Falloff"
						}
					}
					volume_falloff_curve_db_team = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 6.619538, 0.0, -0.311869, -0.311869, 2.0, 3.0 ]",
							"[ 17.077585, -10.603477, -0.127606, -0.127606, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Volume Falloff"
						}
					}
					volume_falloff_curve_db_opponent = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 6.619538, 0.0, -0.311869, -0.311869, 2.0, 3.0 ]",
							"[ 17.077585, -10.603477, -0.127606, -0.127606, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Volume Falloff"
						}
					}
					volume_falloff_curve_db_neutral = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 6.619538, 0.0, -0.311869, -0.311869, 2.0, 3.0 ]",
							"[ 17.077585, -10.603477, -0.127606, -0.127606, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Volume Falloff"
						}
					}
					initial_reflection_send_curve_db_player = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]",
							"[ 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Volume Falloff"
							property_help = "Initial reflection volume amount in db over distance."
						}
					}
					initial_reflection_send_curve_db_team = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]",
							"[ 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Volume Falloff"
							property_help = "Initial reflection volume amount in db over distance."
						}
					}
					initial_reflection_send_curve_db_opponent = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]",
							"[ 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Volume Falloff"
							property_help = "Initial reflection volume amount in db over distance."
						}
					}
					initial_reflection_send_curve_db_neutral = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]",
							"[ 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Volume Falloff"
							property_help = "Initial reflection volume amount in db over distance."
						}
					}
					volume_enemy_targeting_boost = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Relevance"
							property_help = "Volume in db that will boost this sound if its owning entity is targeting the local player."
						}
					}
					volume_falloff_min = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "locked"
							property_help = "Override from citadel_distance_falloff."
						}
					}
					volume_falloff_max = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "locked"
							property_help = "Override from citadel_distance_falloff."
						}
					}
					volume_falloff_floor_enemy_relevance = 
					{
						data_type = "float"
						value = "0.5"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Relevance"
							property_help = "Minimum linear scale volume for a sound with a relevance score > 0. Scales to its full value between relevance 0 to 1."
						}
					}
					volume_falloff_floor_enemy_targeting = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Relevance"
							property_help = "Minimum linear scale volume for a sound with an owner that is targeting the local player."
						}
					}
					volume_offset_player = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Offset"
							property_help = "Volume offset in db from the base _volume_ parameter for the player perspective."
						}
					}
					volume_offset_team = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Offset"
							property_help = "Volume offset in db from the base _volume_ parameter for the team perspective."
						}
					}
					volume_offset_opponent = 
					{
						data_type = "float"
						value = "0.00000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Offset"
							property_help = "Volume offset in db from the base _volume_ parameter for the opponent perspective."
						}
					}
					volume_offset_neutral = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Offset"
							property_help = "Volume offset in db from the base _volume_ parameter for the neutral perspective."
						}
					}
					spread_max_value_player = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Spread"
							property_help = "The value of spread when it is at its maximum (the min distance)."
						}
					}
					spread_max_value_team = 
					{
						data_type = "float"
						value = "0.100000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Spread"
							property_help = "The value of spread when it is at its maximum (the min distance)."
						}
					}
					spread_max_value_opponent = 
					{
						data_type = "float"
						value = "0.10000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Spread"
							property_help = "The value of spread when it is at its maximum (the min distance)."
						}
					}
					spread_max_value_neutral = 
					{
						data_type = "float"
						value = "0.100000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Spread"
							property_help = "The value of spread when it is at its maximum (the min distance)."
						}
					}
					play_from_listener_player = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Play From Listener"
							property_help = "When perspective for this sound is _player_, play it from the listener position. This is good for things like casting abilities and weapon fire."
						}
					}
					play_from_listener_team = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Play From Listener"
						}
					}
					play_from_listener_opponent = 
					{
						data_type = "float"
						value = "0.00000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Play From Listener"
						}
					}
					play_from_listener_neutral = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Play From Listener"
						}
					}
					mix_group_prefix = 
					{
						data_type = "string"
						value = "All"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mixgroup"
							property_help = "The prefix of the mixgroup before it has been combined with the mix_group_suffix_PERSPECTIVE"
						}
					}
					mix_group_suffix_player = 
					{
						data_type = "string"
						value = "-Pla"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mixgroup"
							property_help = "The suffix of the mixgroup before it has been combined with the mix_group_prefix"
						}
					}
					mix_group_suffix_team = 
					{
						data_type = "string"
						value = "-Tea"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mixgroup"
							property_help = "The suffix of the mixgroup before it has been combined with the mix_group_prefix"
						}
					}
					mix_group_suffix_opponent = 
					{
						data_type = "string"
						value = "-Opp"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mixgroup"
							property_help = "The suffix of the mixgroup before it has been combined with the mix_group_prefix"
						}
					}
					mix_group_suffix_neutral = 
					{
						data_type = "string"
						value = "-Neu"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mixgroup"
							property_help = "The suffix of the mixgroup before it has been combined with the mix_group_prefix"
						}
					}
					param_envelope_duration = 
					{
						data_type = "float"
						value = "-1.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					param_envelope_enabled = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					pitch_envelope_scale_min = 
					{
						data_type = "float"
						value = ".85"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					pitch_envelope_scale_max = 
					{
						data_type = "float"
						value = "1.5"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					hrtf_on_player = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "player"
						}
					}
					hrtf_on_team = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "player"
						}
					}
					hrtf_on_opponent = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "player"
						}
					}
					hrtf_on_neutral = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "player"
						}
					}
					hpf_non_player_enabled = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					hpf_player_enabled = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					lpf_player_enabled = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					lpf_non_player_enabled = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					occlusion_scale_non_player = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					occlusion_scale_player = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					mixer_mixlayer_perspective_player = 
					{
						data_type = "string"
						value = ""
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mix Layers"
						}
					}
					mixer_mixlayer_perspective_team = 
					{
						data_type = "string"
						value = ""
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mix Layers"
						}
					}
					mixer_mixlayer_perspective_opponent = 
					{
						data_type = "string"
						value = ""
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mix Layers"
						}
					}
					mixer_mixlayer_perspective_neutral = 
					{
						data_type = "string"
						value = ""
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mix Layers"
						}
					}
					mix_layer_amount_over_time = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]",
							"[ 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Mix Layers"
						}
					}
					send_name_player = 
					{
						data_type = "string"
						value = "player_bus"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Send Name"
							property_help = "Assigns the name of the VMIX track based on perspective."
						}
					}
					send_name_team = 
					{
						data_type = "string"
						value = "team_bus"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Send Name"
							property_help = "Assigns the name of the VMIX track based on perspective."
						}
					}
					send_name_opponent = 
					{
						data_type = "string"
						value = "opponent_bus"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Send Name"
							property_help = "Assigns the name of the VMIX track based on perspective."
						}
					}
					send_name_neutral = 
					{
						data_type = "string"
						value = "main"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Send Name"
							property_help = "Assigns the name of the VMIX track based on perspective."
						}
					}
					max_audible_distance_enemy = 
					{
						data_type = "float"
						value = "-1.000000"
						_system_properties = 
						{
							display_group = "locked"
							property_group = "citadel_enemy_audible_sound"
							property_help = "Set via operator below that works out the x-max of the enemy attenuation curve."
						}
					}
					volume_falloff_scale_team = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Max volume falloff for team perspective."
						}
					}
					volume_falloff_scale_opponent = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Scale volume falloff for opponent perspective."
						}
					}
					volume_falloff_scale_neutral = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Scale volume falloff for neutral perspective."
						}
					}
					volume_falloff_scale_player = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Scale volume falloff for player perspective."
						}
					}
					limiter_max_offset_player = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Limiter"
							property_help = "Entity event limits for player perspective."
						}
					}
					limiter_max_offset_team = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Limiter"
							property_help = "Entity event limits for team perspective."
						}
					}
					limiter_max_offset_opponent = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Limiter"
							property_help = "Entity event limits for opponent perspective."
						}
					}
					limiter_max_offset_neutral = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Limiter"
							property_help = "Entity event limits for neutral perspective."
						}
					}
					send_distance_to_blend_container = 
					{
						data_type = "bool"
						value = "false"
						_system_properties = 
						{
							display_group = "normal"
							property_group = "Blends"
						}
					}
					send_occlusion_to_blend_container = 
					{
						data_type = "bool"
						value = "false"
						_system_properties = 
						{
							display_group = "normal"
							property_group = "Blends"
						}
					}
					solo_for_owner_and_emitter = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "normal"
							property_group = "Perspective"
						}
					}
				}
			},
			
			{
				name = "check_param_envelope_duration_valid"
				input_execute = "1.0"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.param_envelope_duration"
				input2 = "0.0"
			},
			
			{
				name = "check_enable_param_envelope"
				input_execute = "1.0"
				operator = "math_float"
				apply = "greater_than_or_equal"
				input1 = "@public.param_envelope_enabled"
				input2 = "1.0"
			},
			
			{
				name = "mult_param_envelope_enabled"
				input_execute = "@check_enable_param_envelope.output"
				operator = "math_float"
				apply = "mult"
				input1 = "@check_enable_param_envelope.output"
				input2 = "@check_param_envelope_duration_valid.output"
			},
			
			{
				name = "div_param_envelope_elapsed_time"
				input_execute = "@mult_param_envelope_enabled.output"
				operator = "math_float"
				apply = "div"
				input1 = "@citadel_default_3d::citadel_base_3d::get_event_info.output_elapsed_time"
				input2 = "@public.param_envelope_duration"
			},
			
			{
				name = "ease_param_envelope"
				input_execute = "1.0"
				operator = "math_func_float"
				function = "ease_sin_out"
				input1 = "@div_param_envelope_elapsed_time.output"
			},
			
			{
				name = "remap_progress_envelope_to_pitch_scale"
				operator = "math_remap_float"
				input_execute = "@mult_param_envelope_enabled.output"
				input = "@ease_param_envelope.output"
				input_min = "0.0"
				input_max = "1.0"
				input_map_min = "@public.pitch_envelope_scale_min"
				input_map_max = "@public.pitch_envelope_scale_max"
				default_to_max = "false"
			},
			
			{
				name = "switch_pitch_external"
				operator = "ctrl_switch_float"
				input_switch = "@mult_param_envelope_enabled.output"
				input1 = "1"
				input2 = "@remap_progress_envelope_to_pitch_scale.output"
			},
			
			{
				name = "citadel_find_perspective"
				operator = "sos_import_stack"
				import_stack = "citadel_find_perspective"
				auto_connect_public_fields = "true"
			},
			
			{
				name = "perspective_switch_volume_falloff_min"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.volume_falloff_min_player"
				input_team_value = "@public.volume_falloff_min_team"
				input_opponent_value = "@public.volume_falloff_min_opponent"
				input_neutral_value = "@public.volume_falloff_min_neutral"
			},
			
			{
				name = "perspective_switch_volume_falloff_max"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.volume_falloff_max_player"
				input_team_value = "@public.volume_falloff_max_team"
				input_opponent_value = "@public.volume_falloff_max_opponent"
				input_neutral_value = "@public.volume_falloff_max_neutral"
			},
			
			{
				name = "perspective_switch_volume_curve_field_name"
				operator = "logic_perspective_switch_string"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "public.volume_falloff_curve_db_player"
				input_team_value = "public.volume_falloff_curve_db_team"
				input_opponent_value = "public.volume_falloff_curve_db_opponent"
				input_neutral_value = "public.volume_falloff_curve_db_neutral"
			},
			
			{
				name = "perspective_switch_initial_reflection_field_name"
				operator = "logic_perspective_switch_string"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "public.initial_reflection_send_curve_db_player"
				input_team_value = "public.initial_reflection_send_curve_db_team"
				input_opponent_value = "public.initial_reflection_send_curve_db_opponent"
				input_neutral_value = "public.initial_reflection_send_curve_db_neutral"
			},
			
			{
				name = "perspective_switch_volume"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.volume_offset_player"
				input_team_value = "@public.volume_offset_team"
				input_opponent_value = "@public.volume_offset_opponent"
				input_neutral_value = "@public.volume_offset_neutral"
			},
			
			{
				name = "math_perspective_volume_offset"
				input_execute = "1.0"
				operator = "math_float"
				apply = "add"
				input1 = "@perspective_switch_volume.output"
				input2 = "@public.volume"
			},
			
			{
				name = "perspective_switch_force_player_position"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.play_from_listener_player"
				input_team_value = "@public.play_from_listener_team"
				input_opponent_value = "@public.play_from_listener_opponent"
				input_neutral_value = "@public.play_from_listener_neutral"
			},
			
			{
				name = "perspective_switch_spread_max_value"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.spread_max_value_player"
				input_team_value = "@public.spread_max_value_team"
				input_opponent_value = "@public.spread_max_value_opponent"
				input_neutral_value = "@public.spread_max_value_neutral"
			},
			
			{
				name = "perspective_switch_occlusion_scale"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.occlusion_scale_player"
				input_team_value = "@public.occlusion_scale_non_player"
				input_opponent_value = "@public.occlusion_scale_non_player"
				input_neutral_value = "@public.occlusion_scale_non_player"
			},
			
			{
				name = "perspective_switch_distance_hpf_on"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.hpf_player_enabled"
				input_team_value = "@public.hpf_non_player_enabled"
				input_opponent_value = "@public.hpf_non_player_enabled"
				input_neutral_value = "@public.hpf_non_player_enabled"
			},
			
			{
				name = "perspective_switch_distance_lpf_on"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.lpf_non_player_enabled"
				input_team_value = "@public.lpf_non_player_enabled"
				input_opponent_value = "@public.lpf_non_player_enabled"
				input_neutral_value = "@public.lpf_non_player_enabled"
			},
			
			{
				name = "perspective_switch_hrtf_on"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.hrtf_on_player"
				input_team_value = "@public.hrtf_on_team"
				input_opponent_value = "@public.hrtf_on_opponent"
				input_neutral_value = "@public.hrtf_on_neutral"
			},
			
			{
				name = "perspective_switch_volume_falloff_scale"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.volume_falloff_scale_player"
				input_team_value = "@public.volume_falloff_scale_team"
				input_opponent_value = "@public.volume_falloff_scale_opponent"
				input_neutral_value = "@public.volume_falloff_scale_neutral"
			},
			
			{
				name = "mix_group_suffix_switch"
				operator = "logic_perspective_switch_string"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.mix_group_suffix_player"
				input_team_value = "@public.mix_group_suffix_team"
				input_opponent_value = "@public.mix_group_suffix_opponent"
				input_neutral_value = "@public.mix_group_suffix_neutral"
			},
			
			{
				name = "concat_mix_group_strings"
				operator = "math_string"
				input_execute = "1"
				input1 = "@public.mix_group_prefix"
				input2 = "@mix_group_suffix_switch.output"
				apply = "add"
			},
			
			{
				name = "mix_group_prefix_disabled"
				operator = "math_string"
				input_execute = "1"
				input1 = "@public.mix_group_prefix"
				input2 = ""
				apply = "equal"
			},
			
			{
				name = "mix_group_name_switch"
				operator = "ctrl_switch_string"
				input_switch = "@mix_group_prefix_disabled.output"
				input1 = "@concat_mix_group_strings.output_string"
				input2 = "@public.mixer_mixgroup"
			},
			
			{
				name = "mix_layer_string_switch"
				operator = "logic_perspective_switch_string"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.mixer_mixlayer_perspective_player"
				input_team_value = "@public.mixer_mixlayer_perspective_team"
				input_opponent_value = "@public.mixer_mixlayer_perspective_opponent"
				input_neutral_value = "@public.mixer_mixlayer_perspective_neutral"
			},
			
			{
				name = "mix_layer_persepective_not_empty"
				operator = "math_string"
				input_execute = "1"
				input1 = "@mix_layer_string_switch.output"
				input2 = ""
				apply = "not_equal"
			},
			
			{
				name = "mix_layer_select_input"
				operator = "ctrl_switch_float"
				input_switch = "@mix_layer_persepective_not_empty.output"
				input1 = "0.0"
				input2 = "3.0"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "remap_mix_layer_amount_over_time"
				operator = "math_curve_2d"
				input = "@get_event_info.output_elapsed_time"
				public_field_name = "public.mix_layer_amount_over_time"
			},
			
			{
				name = "mix_layer_amount_over_time_mult"
				input_execute = "1.0"
				operator = "math_float"
				apply = "mult"
				input1 = "@mix_layer_persepective_not_empty.output"
				input2 = "@remap_mix_layer_amount_over_time.output"
			},
			
			{
				name = "get_citadel_entity_info"
				operator = "citadel_entity_info"
				input_execute = "1"
				input_entity_index = "@citadel_find_perspective::output.entity_index"
			},
			
			{
				name = "math_enemy_targeting_volume_scalar"
				input_execute = "1.0"
				operator = "math_float"
				apply = "mult"
				input1 = "@get_citadel_entity_info.output_enemy_is_targeting_local_player"
				input2 = "@public.volume_enemy_targeting_boost"
			},
			
			{
				name = "math_enemy_targeting_volume_boost"
				input_execute = "1.0"
				operator = "math_float"
				apply = "add"
				input1 = "@math_perspective_volume_offset.output"
				input2 = "@math_enemy_targeting_volume_scalar.output"
			},
			
			{
				name = "check_perspective_is_not_owner_or_emitter"
				input_execute = "@public.solo_for_owner_and_emitter"
				operator = "math_float"
				apply = "equal"
				input1 = "0.0"
				input2 = "@citadel_find_perspective::output.perspective_is_owner_or_emitter"
			},
			
			{
				name = "math_volume_mute_to_db"
				input_execute = "1.0"
				operator = "math_gain_to_db"
				input = "@citadel_find_perspective::output.perspective_is_owner_or_emitter"
			},
			
			{
				name = "switch_volume_solo_owner_and_emitter"
				operator = "ctrl_switch_float"
				input_switch = "@check_perspective_is_not_owner_or_emitter.output"
				input1 = "0.0"
				input2 = "@math_volume_mute_to_db.output"
			},
			
			{
				name = "math_solo_owner_or_emitter"
				input_execute = "1.0"
				operator = "math_float"
				apply = "add"
				input1 = "@math_enemy_targeting_volume_boost.output"
				input2 = "@switch_volume_solo_owner_and_emitter.output"
			},
			
			{
				name = "remap_volume_falloff_floor"
				operator = "math_remap_float"
				input_execute = "1"
				input = "@get_citadel_entity_info.output_relevance"
				input_min = "0.0"
				input_max = "1.0"
				input_map_min = "@public.volume_falloff_floor"
				input_map_max = "@public.volume_falloff_floor_enemy_relevance"
				default_to_max = "false"
			},
			
			{
				name = "math_enemy_targeting_volume_floor"
				input_execute = "1.0"
				operator = "math_float"
				apply = "mult"
				input1 = "@get_citadel_entity_info.output_enemy_is_targeting_local_player"
				input2 = "@public.volume_falloff_floor_enemy_targeting"
			},
			
			{
				name = "max_volume_floor"
				input_execute = "1.0"
				operator = "math_float"
				apply = "max"
				input1 = "@remap_volume_falloff_floor.output"
				input2 = "@math_enemy_targeting_volume_floor.output"
			},
			
			{
				name = "send_name_switch"
				operator = "logic_perspective_switch_string"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.send_name_player"
				input_team_value = "@public.send_name_team"
				input_opponent_value = "@public.send_name_opponent"
				input_neutral_value = "@public.send_name_neutral"
			},
			
			{
				name = "perspective_switch_limiter_max_offset"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.limiter_max_offset_player"
				input_team_value = "@public.limiter_max_offset_team"
				input_opponent_value = "@public.limiter_max_offset_opponent"
				input_neutral_value = "@public.limiter_max_offset_neutral"
			},
			
			{
				name = "math_offset_limiter_max"
				input_execute = "1.0"
				operator = "math_float"
				apply = "add"
				input1 = "@perspective_switch_limiter_max_offset.output"
				input2 = "@public.limiter_max"
			},
			
			{
				name = "citadel_default_3d"
				operator = "sos_import_stack"
				import_stack = "citadel_default_3d"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
					volume_falloff_min = 
					{
						data_type = "float"
						value = "@perspective_switch_volume_falloff_min.output"
					}
					volume_falloff_max = 
					{
						data_type = "float"
						value = "@perspective_switch_volume_falloff_max.output"
					}
					volume = 
					{
						data_type = "float"
						value = "@math_solo_owner_or_emitter.output"
					}
					volume_falloff_floor = 
					{
						data_type = "float"
						value = "@max_volume_floor.output"
					}
					volume_falloff_curve_field_name = 
					{
						data_type = "string"
						value = "@perspective_switch_volume_curve_field_name.output"
					}
					position_force_from_player = 
					{
						data_type = "float"
						value = "@perspective_switch_force_player_position.output"
					}
					spread_max_value = 
					{
						data_type = "float"
						value = "@perspective_switch_spread_max_value.output"
					}
					occlusion_scale = 
					{
						data_type = "float"
						value = "@perspective_switch_occlusion_scale.output"
					}
					distance_hpf_on = 
					{
						data_type = "float"
						value = "@perspective_switch_distance_hpf_on.output"
					}
					distance_lpf_on = 
					{
						data_type = "float"
						value = "@perspective_switch_distance_lpf_on.output"
					}
					hrtf_on = 
					{
						data_type = "float"
						value = "@perspective_switch_hrtf_on.output"
					}
					mixer_mixgroup = 
					{
						data_type = "string"
						value = "@mix_group_name_switch.output"
					}
					pitch_external = 
					{
						data_type = "float"
						value = "@switch_pitch_external.output"
					}
					mixer_mixlayer_to_set = 
					{
						data_type = "string"
						value = "@mix_layer_string_switch.output"
					}
					mixer_set_mixlayer_input = 
					{
						data_type = "float"
						value = "@mix_layer_select_input.output"
					}
					mixer_mixlayer_amount_manual = 
					{
						data_type = "float"
						value = "@mix_layer_amount_over_time_mult.output"
					}
					send_name = 
					{
						data_type = "string"
						value = "@send_name_switch.output"
					}
					initial_reflection_curve_field_name = 
					{
						data_type = "string"
						value = "@perspective_switch_initial_reflection_field_name.output"
					}
					volume_falloff_scale = 
					{
						data_type = "float"
						value = "@perspective_switch_volume_falloff_scale.output"
					}
					limiter_max = 
					{
						data_type = "float"
						value = "@math_offset_limiter_max.output"
					}
					reverb_level = 
					{
						data_type = "float"
						value = "0.0"
					}
				}
			},
			
			{
				name = "citadel_source_reverb_send"
				operator = "sos_import_stack"
				import_stack = "citadel_source_reverb_send"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
					source_reverb_emitter_location = 
					{
						data_type = "float3"
						value = "@citadel_default_3d::citadel_base_3d::add_position_offset.output"
					}
					source_reverb_distance = 
					{
						data_type = "float"
						value = "@citadel_default_3d::citadel_base_3d::distance_filter.output"
					}
					source_reverb_voice_volume = 
					{
						data_type = "float"
						value = "@citadel_default_3d::citadel_base_3d::math_volume_scale_mixer.output"
					}
					source_reverb_mixer_dsp = 
					{
						data_type = "float"
						value = "@citadel_default_3d::citadel_base_3d::mixer.output_dsp"
					}
				}
			},
			
			{
				name = "draw_perspective"
				input_execute = "1"
				operator = "util_draw_perspective"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_name = "perspective"
				input_position = "@citadel_default_3d::citadel_base_3d::add_position_offset.output"
			},
			
			{
				name = "draw_relevance"
				input_execute = "1"
				operator = "util_draw_relevance"
				input_relevance_value = "@get_citadel_entity_info.output_relevance"
				input_name = ""
				input_position = "@citadel_default_3d::citadel_base_3d::add_position_offset.output"
			},
			
			{
				name = "evaluate_opvar_falloff_curve"
				operator = "math_curve_2d"
				input_execute = "1.0"
				input = "@citadel_default_3d::citadel_base_3d::distance_filter.output"
				public_field_name = "public.volume_falloff_curve_db_opponent"
				input_scale_x = "1.0"
				input_scale_y = "1.0"
			},
			
			{
				name = "max_distance_switch"
				operator = "ctrl_switch_float"
				input_switch = "@public.volume_falloff_use_curve_editor"
				input1 = "@public.volume_falloff_max_opponent"
				input2 = "@evaluate_opvar_falloff_curve.output_x_max"
			},
			
			{
				name = "math_calc_max_enemy_distance"
				input_execute = "@public.is_enemy_audible_sound"
				operator = "math_float"
				apply = "add"
				input1 = "@citadel_default_3d::citadel_base_3d::distance_filter.output"
				input2 = "@max_distance_switch.output"
			},
			
			{
				name = "set_opvar_max_distance_query"
				operator = "opvar_set_float"
				input = "@math_calc_max_enemy_distance.output"
				input_execute = "1.0"
				input_operator_name = "public"
				input_field_name = "max_audible_distance_enemy"
				input_use_namespace = "false"
				input_get_parent = "true"
			},
			
			{
				name = "set_occlusion_blend"
				operator = "container_set_param_number"
				input_execute = "@public.send_occlusion_to_blend_container"
				input_value = "@citadel_default_3d::citadel_base_3d::occlusion_filter.output"
				input_name = "Occlusion"
			},
			
			{
				name = "set_distance_blend"
				operator = "container_set_param_number"
				input_execute = "@public.send_distance_to_blend_container"
				input_value = "@citadel_default_3d::citadel_base_3d::distance_to_source.output"
				input_name = "Distance"
			},
			
			{
				name = "citadel_enemy_audible_sound"
				operator = "sos_import_stack"
				import_stack = "citadel_enemy_audible_sound"
				auto_connect_public_fields = "false"
				operator_variables = 
				{
					owner_entity_index = 
					{
						data_type = "float"
						value = "@public.owner_entity_index"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "citadel"
		}
	}
}