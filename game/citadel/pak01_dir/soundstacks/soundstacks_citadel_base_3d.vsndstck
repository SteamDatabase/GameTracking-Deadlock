<!-- kv3 encoding:text:version{e21c7f3c-8a33-41c5-9977-a76d3a32aa0d} format:generic:version{7412167c-06e9-4698-aff2-e63eb59037e7} -->
{
	citadel_base_3d = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					import_public_opvars = 
					[
						"citadel_soundevent_block",
						"citadel_distance_falloff",
					]
					position = 
					{
						data_type = "float3"
						value = "[0.0, 0.0, 0.0]"
						_system_properties = 
						{
							property_group = "Position"
							display_group = "locked"
							display_edit_type = "field_position_editor"
						}
					}
					position_offset = 
					{
						data_type = "float3"
						value = "[0.0, 0.0, 0.0]"
						_system_properties = 
						{
							property_group = "Position"
							display_group = "advanced"
						}
					}
					position_force_static = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Position"
							display_group = "advanced"
						}
					}
					position_force_from_player = 
					{
						data_type = "bool"
						value = "false"
						_system_properties = 
						{
							property_group = "Position"
							display_group = "advanced"
						}
					}
					position_force_from_input = 
					{
						data_type = "bool"
						value = "false"
						_system_properties = 
						{
							property_group = "Position"
							display_group = "advanced"
						}
					}
					hold_position_on_deleted_entity = 
					{
						data_type = "bool"
						value = "true"
						_system_properties = 
						{
							property_group = "Position"
							display_group = "advanced"
						}
					}
					volume = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Volume"
							display_edit_type = "field_linear_atten_editor"
						}
					}
					volume_rand_min = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Volume"
							display_group = "advanced"
						}
					}
					volume_rand_max = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Volume"
							display_group = "advanced"
						}
					}
					volume_mult = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							property_group = "Volume"
						}
					}
					volume_fade_in = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Volume"
							display_group = "advanced"
						}
					}
					volume_fade_out = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Volume"
							display_group = "advanced"
						}
					}
					volume_falloff_min = 
					{
						data_type = "float"
						value = "800.000000"
						_system_properties = 
						{
							property_group = "Volume"
						}
					}
					volume_falloff_max = 
					{
						data_type = "float"
						value = "3000.000000"
						_system_properties = 
						{
							property_group = "Volume"
						}
					}
					volume_falloff_curve_amount = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							property_group = "Volume"
						}
					}
					volume_falloff_floor = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Volume"
						}
					}
					volume_falloff_curve_field_name = 
					{
						data_type = "string"
						value = "public.volume_falloff_curve_db"
						_system_properties = 
						{
							display_group = "locked"
							property_group = "Volume"
							property_help = "Used by child stacks to override the volume-over-distance falloff."
						}
					}
					volume_falloff_curve_db = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 6.619538, 0.0, -0.311869, -0.311869, 2.0, 3.0 ]",
							"[ 17.077585, -10.603477, -0.127606, -0.127606, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Volume"
							display_edit_type = "field_curve_2d_editor"
						}
					}
					volume_falloff_use_curve_editor = 
					{
						data_type = "bool"
						value = "false"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Volume"
							property_help = "Enable curve editing. 'volume_falloff_min', 'volume_falloff_max', 'volume_falloff_curve_amount' no longer apply. 'volume_falloff_floor' still applies."
						}
					}
					volume_falloff_scale = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Scale volume falloff."
						}
					}
					volume_atten = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							property_group = "Volume"
							display_group = "locked"
						}
					}
					volume_atten_override = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Volume"
							display_group = "advanced"
						}
					}
					volume_filter_amount = 
					{
						data_type = "float"
						value = "999.000000"
						_system_properties = 
						{
							property_group = "Volume"
							display_group = "advanced"
						}
					}
					pitch = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							property_group = "Pitch"
						}
					}
					pitch_force_input_to_value = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Pitch"
							display_group = "advanced"
						}
					}
					pitch_adjust = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							property_group = "Pitch"
							display_group = "locked"
						}
					}
					pitch_rand_min = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Pitch"
							display_group = "advanced"
						}
					}
					pitch_rand_max = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Pitch"
							display_group = "advanced"
						}
					}
					pitch_modulation_max = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							property_group = "Pitch"
						}
					}
					pitch_modulation_attack = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Pitch"
						}
					}
					pitch_modulation_release = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Pitch"
						}
					}
					pitch_modulation_namespace = 
					{
						data_type = "string"
						value = ""
						_system_properties = 
						{
							property_group = "Pitch"
						}
					}
					delay = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Delay"
							display_group = "advanced"
						}
					}
					delay_rand_min = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Delay"
							display_group = "advanced"
						}
					}
					delay_rand_max = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Delay"
							display_group = "advanced"
						}
					}
					delay_use_distance_curve = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Delay"
							display_group = "advanced"
						}
					}
					block_volume_min = 
					{
						data_type = "float"
						value = "0.0001"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
							property_help = "Don't play a voice if it's initial volume is less than this param."
						}
					}
					block_distance_max = 
					{
						data_type = "float"
						value = "-1.000000"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
							property_help = "Don't play a voice if it's initial distance is greater than this param."
						}
					}
					spread_min = 
					{
						data_type = "float"
						value = "250"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Spread"
							display_edit_type = "field_2d2knot_editor"
							x1_field = "public.spread_min"
							x2_field = "public.spread_max"
							y1_field = "public.spread_max_value"
							y2_field = "public.spread_min_value"
							curve_type = "linear"
							operator_name = "speakers_spatialize"
						}
					}
					spread_max = 
					{
						data_type = "float"
						value = "500"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Spread"
						}
					}
					spread_min_value = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Spread"
						}
					}
					spread_max_value = 
					{
						data_type = "float"
						value = "0.10000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Spread"
						}
					}
					occlusion_scale = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Occlusion"
						}
					}
					occlusion_radius = 
					{
						data_type = "float"
						value = "150.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Occlusion"
						}
					}
					occlusion_min = 
					{
						data_type = "float"
						value = "0.25"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Occlusion"
						}
					}
					occlusion_max = 
					{
						data_type = "float"
						value = "1.00000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Occlusion"
						}
					}
					occlusion_volume_blend_distance_min = 
					{
						data_type = "float"
						value = "800.00000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Occlusion"
						}
					}
					occlusion_volume_blend_distance_max = 
					{
						data_type = "float"
						value = "2000.00000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Occlusion"
						}
					}
					occlusion_max_velocity = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Occlusion"
						}
					}
					occlusion_interval = 
					{
						data_type = "float"
						value = "0.100000"
						_system_properties = 
						{
							property_group = "Occlusion"
						}
					}
					limiter_on = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
						}
					}
					limiter_max = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
						}
					}
					limiter_match_entity = 
					{
						data_type = "float"
						value = "1"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
						}
					}
					limiter_stop_oldest = 
					{
						data_type = "bool"
						value = "true"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
						}
					}
					limiter_match_event_duration = 
					{
						data_type = "float"
						value = "-1.000000"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
						}
					}
					event_stop_at_time = 
					{
						data_type = "float"
						value = "-1.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					event_voice_layer = 
					{
						data_type = "enum"
						enum_field = "vmix_voice_start.voice_layer"
						value = "game"
						_system_properties = 
						{
							property_group = "Event Control"
						}
					}
					event_use_music_convar = 
					{
						data_type = "bool"
						value = "false"
						_system_properties = 
						{
							property_group = "Event Control"
						}
					}
					memory_type = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					volume_fade_over_time_curve = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 1.0, 1.0, 0.227125, 0.227125, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							property_group = "Volume"
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
						}
					}
					attachment = 
					{
						data_type = "string_token"
						value = ""
						_system_properties = 
						{
							display_group = "locked"
							property_help = "entity info attachment parameter."
						}
					}
					distance_max_velocity = 
					{
						data_type = "float"
						value = "20000"
						_system_properties = 
						{
							display_group = "advanced"
							property_help = "distance_filter parameter"
						}
					}
					debug_radius_inner = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Debug"
						}
					}
					debug_radius_outer = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Debug"
						}
					}
					debug_string = 
					{
						data_type = "string"
						value = "0"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Debug"
						}
					}
					doppler_factor = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Doppler"
						}
					}
					doppler_factor_receding = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Doppler"
						}
					}
					doppler_on = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Doppler"
						}
					}
					facing_vol_attenuation_on = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_help = "citadel_facing_atten"
						}
					}
					send_name = 
					{
						data_type = "string"
						value = "main"
						_system_properties = 
						{
							display_group = "advanced"
							property_help = "name of the track of the voice in the main mixgraph"
						}
					}
					enable_initial_reflection_send = 
					{
						data_type = "bool"
						value = "false"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "citadel_initial_reflection_send"
							property_help = "Toggles the initial reflection send."
						}
					}
					initial_reflection_curve_field_name = 
					{
						data_type = "string"
						value = "public.initial_reflection_send_db_distance"
						_system_properties = 
						{
							display_group = "locked"
							property_group = "citadel_initial_reflection_send"
							property_help = "Name of the float6 field that represents the send value over distance curve."
						}
					}
					initial_reflection_send_db_distance = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]",
							"[ 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "citadel_initial_reflection_send"
						}
					}
					reverb_use_curve = 
					{
						data_type = "float"
						value = "1"
						_system_properties = 
						{
							property_group = "Reverb"
							display_group = "advanced"
						}
					}
					reverb_xfade_value = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Reverb"
							display_group = "advanced"
						}
					}
					reverb_falloff_curve = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 1.0, 1.0, 0.227125, 0.227125, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							property_group = "Reverb"
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
						}
					}
					reverb_curve_max_distance = 
					{
						data_type = "float"
						value = "2500.000000"
						_system_properties = 
						{
							property_group = "Reverb"
							display_group = "advanced"
						}
					}
					reverb_curve_scale_y = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							property_group = "Reverb"
							display_group = "advanced"
						}
					}
					cull_at_distance = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
						}
					}
					cull_think_time_min = 
					{
						data_type = "float"
						value = "0.050000"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
						}
					}
					cull_think_time_max = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
						}
					}
					block_stop_radius_around_player = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Limiter"
							display_group = "advanced"
						}
					}
					hrtf_on = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Hrtf"
						}
					}
					hrtf_mix = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Hrtf"
						}
					}
					use_pathing_render = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Pathing"
						}
					}
					use_pathing_distance = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Pathing"
						}
					}
					use_pathing_render_eq = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Pathing"
						}
					}
					pathing_render_mix = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Pathing"
						}
					}
					recency_bias = 
					{
						data_type = "float"
						value = "-1.0"
						_system_properties = 
						{
							display_group = "locked"
							property_group = "Recency Bias"
							property_help = "Set by code."
						}
					}
					recency_bias_max_scale = 
					{
						data_type = "float"
						value = "0.5"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Recency Bias"
						}
					}
					recency_bias_min_scale = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Recency Bias"
						}
					}
					metadata = 
					{
						data_type = "string"
						soundevent_data = "true"
						value = 
						[
							"",
						]
					}
					instance_attenuator_enabled = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Instance Attenuator"
							property_help = "Enables, disables gain adjustment relative to number of group branch instances."
						}
					}
					instance_count_offset_amount_db = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 6.619538, 0.0, -0.311869, -0.311869, 2.0, 3.0 ]",
							"[ 17.077585, -10.603477, -0.127606, -0.127606, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Instance Attenuator"
							display_edit_type = "field_curve_2d_editor"
						}
					}
					instance_attenuator_name = 
					{
						data_type = "string"
						value = ""
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Instance Attenuator"
							property_help = "The name of the branch that the group evaluates."
						}
					}
					max_distance_recipient_filter = 
					{
						data_type = "float"
						value = "-1.f"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Blocking"
							property_help = "The server and client may query this value to see if it should play the sound from game code."
						}
					}
					context_name = 
					{
						data_type = "string"
						value = "default"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "citadel_dialog"
							property_help = "Lookup name for per speaking voice volume"
						}
					}
					vsnd_file = 
					{
						data_type = "vsnd"
						value = "sounds/common/null.vsnd"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "voice envelope timing"
							property_help = "should be set by sos import in default_2d/3d"
						}
					}
					mixer_mixgroup = 
					{
						data_type = "string"
						value = "All"
						_system_properties = 
						{
							property_group = "Mixer"
						}
					}
					mixer_trigger_input = 
					{
						data_type = "enum"
						enum_decl = 
						{
							value = 
							[
								"Volume",
								"Envelope",
								"Custom Amount",
							]
						}
						value = "Envelope"
						_system_properties = 
						{
							property_group = "Mixer"
						}
					}
					mixer_trigger_amount_manual = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Mixer"
						}
					}
					mixer_set_mixlayer_input = 
					{
						data_type = "enum"
						enum_decl = 
						{
							value = 
							[
								"Disabled",
								"Volume",
								"Envelope",
								"Custom Amount",
							]
						}
						value = "Disabled"
						_system_properties = 
						{
							property_group = "Mix Layer"
						}
					}
					mixer_mixlayer_to_set = 
					{
						data_type = "string"
						value = ""
						_system_properties = 
						{
							property_group = "Mix Layer"
						}
					}
					mixer_mixlayer_amount_manual = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Mix Layer"
						}
					}
				}
			},
			
			{
				name = "output"
				operator = "util_null"
				operator_variables = 
				{
					distance_for_limiter = 
					{
						data_type = "float"
						value = "1.000000"
					}
					volume_for_limiter = 
					{
						data_type = "float"
						value = "1.000000"
					}
				}
			},
			
			{
				name = "source_info"
				operator = "game_get_source_info"
			},
			
			{
				name = "globals"
				operator = "get_system_globals"
				input_execute = "1"
				input_listener_index = "0"
			},
			
			{
				name = "set_layer"
				operator = "soundevent_control"
				voice_layer = "@public.event_voice_layer"
			},
			
			{
				name = "global_pathing_enabled"
				operator = "convar_get"
				convar = "snd_steamaudio_enable_pathing"
			},
			
			{
				name = "use_pathing_render_updated"
				operator = "math_float"
				apply = "and"
				input1 = "@global_pathing_enabled.output"
				input2 = "@public.use_pathing_render"
			},
			
			{
				name = "use_pathing_distance_updated"
				operator = "math_float"
				apply = "and"
				input1 = "@global_pathing_enabled.output"
				input2 = "@public.use_pathing_distance"
			},
			
			{
				name = "use_pathing_updated"
				operator = "math_float"
				apply = "or"
				input1 = "@use_pathing_render_updated.output"
				input2 = "@use_pathing_distance_updated.output"
			},
			
			{
				name = "test_from_player_index"
				operator = "ctrl_switch_float"
				input_switch = "@public.position_force_from_player"
				input2 = "-1"
				input1 = "@source_info.output_entity_index"
			},
			
			{
				name = "get_entity_info"
				input_execute = "1"
				operator = "game_entity_info"
				input_entity_index = "@test_from_player_index.output"
				input_default_world_position = "@public.position"
				input_default_local_position = "@globals.output_listener_front"
				input_hold_position_on_deleted_entity = "@public.hold_position_on_deleted_entity"
				use_world_position = "@public.position_force_from_input"
				attachment = "@public.attachment"
			},
			
			{
				name = "add_position_offset"
				operator = "math_float3"
				apply = "add"
				input1 = "@get_entity_info.output_position"
				input2 = "@public.position_offset"
			},
			
			{
				name = "delay_random"
				operator = "math_randomize_float"
				execute_once = "true"
				input = "@public.delay"
				input_rand_min = "@public.delay_rand_min"
				input_rand_max = "@public.delay_rand_max"
			},
			
			{
				name = "remap_delay_distance"
				operator = "math_curve_2d_4knot"
				curve_type = "linear"
				execute_once = "1.000000"
				input = "@distance_to_source.output"
				input_X1 = "0.000000"
				input_Y1 = "0.000000"
				input_X2 = "100.000000"
				input_Y2 = "0.100000"
				input_X3 = "1000.000000"
				input_Y3 = "0.150000"
				input_X4 = "1000.000000"
				input_Y4 = "0.150000"
			},
			
			{
				name = "switch_delay"
				operator = "ctrl_switch_float"
				input_switch = "@public.delay_use_distance_curve"
				input1 = "@delay_random.output"
				input2 = "@remap_delay_distance.output"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
				input_stack_delay = "@switch_delay.output"
			},
			
			{
				name = "math_not_in_predelay"
				operator = "math_float"
				apply = "greater_than_or_equal"
				input1 = "@get_event_info.output_elapsed_time"
				input2 = "@get_event_info.output_final_delay"
			},
			
			{
				name = "distance_to_source"
				operator = "calc_distance"
				input_position1 = "@add_position_offset.output"
				input_position2 = "@globals.output_listener_position"
			},
			
			{
				name = "params_steamaudio_source"
				operator = "process_steamaudio_source"
				input_execute = "@use_pathing_updated.output"
				input_source_position = "@add_position_offset.output"
				input_listener_position = "@globals.output_listener_position"
				input_pathing_enabled = "@use_pathing_updated.output"
				input_pathing_eq_enabled = "@public.use_pathing_render_eq"
				input_source_offset = 0
			},
			
			{
				name = "pathing_distance_ratio_updated"
				operator = "ctrl_switch_float"
				execute_once = "false"
				input_switch = "@use_pathing_distance_updated.output"
				input1 = "1.0"
				input2 = "@params_steamaudio_source.output_pathing_distance_ratio"
			},
			
			{
				name = "distance_to_source_updated"
				operator = "math_float"
				execute_once = "false"
				apply = "div"
				input1 = "@distance_to_source.output"
				input2 = "@pathing_distance_ratio_updated.output"
			},
			
			{
				name = "distance_filter"
				operator = "math_filter_float"
				input = "@distance_to_source_updated.output"
				input_max_velocity = "@public.distance_max_velocity"
			},
			
			{
				name = "get_effect_health_amount"
				operator = "game_entity_get_health"
			},
			
			{
				name = "block_radius_logic"
				operator = "math_float"
				execute_once = "true"
				apply = "greater_than"
				input1 = "@distance_to_source.output"
				input2 = "@public.block_stop_radius_around_player"
			},
			
			{
				name = "import_block_stack"
				operator = "sos_import_stack"
				import_stack = "citadel_soundevent_block"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
					position = 
					{
						data_type = "float3"
						value = "@add_position_offset.output"
					}
					block_test = 
					{
						data_type = "float"
						value = "@block_radius_logic.output"
					}
					block_execute = 
					{
						data_type = "float"
						value = "@block_radius_logic.output"
					}
				}
			},
			
			{
				name = "test_debug_radius"
				input_execute = "@public.debug_radius_inner"
				operator = "util_draw_radius"
				input_radius_min = "@public.debug_radius_inner"
				input_radius_max = "@public.debug_radius_outer"
				input_name = "@public.debug_string"
				input_position = "@add_position_offset.output"
			},
			
			{
				name = "facing_submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1"
				input = "0"
				send_type = "facing"
			},
			
			{
				name = "greater_than_cull_distance"
				operator = "math_float"
				input_execute = "@public.cull_at_distance"
				apply = "greater_than"
				input1 = "@distance_to_source.output"
				input2 = "@public.cull_at_distance"
			},
			
			{
				name = "culling_and_unstopped"
				operator = "math_float"
				input_execute = "@public.cull_at_distance"
				apply = "min"
				input1 = "@greater_than_cull_distance.output"
				input2 = "@get_event_info.output_unstopped"
			},
			
			{
				name = "calc_max_think_time_distance"
				operator = "math_float"
				input_execute = "@public.cull_at_distance"
				execute_once = "true"
				apply = "mult"
				input1 = "@public.cull_at_distance"
				input2 = "2.000000"
			},
			
			{
				name = "calc_think_time_max_rand_val"
				operator = "math_float"
				input_execute = "@public.cull_at_distance"
				execute_once = "true"
				apply = "mult"
				input1 = "@public.cull_think_time_max"
				input2 = "0.600000"
			},
			
			{
				name = "calc_random_max_think_time"
				operator = "math_random_float"
				input_execute = "@culling_and_unstopped.output"
				input_min = "@calc_think_time_max_rand_val.output"
				input_max = "@public.cull_think_time_max"
				round_to_int = "0"
			},
			
			{
				name = "calc_culling_think_time"
				operator = "math_remap_float"
				input_execute = "@culling_and_unstopped.output"
				input = "@distance_to_source.output"
				input_min = "@public.cull_at_distance"
				input_max = "@calc_max_think_time_distance.output"
				input_map_min = "@public.cull_think_time_min"
				input_map_max = "@calc_random_max_think_time.output"
			},
			
			{
				name = "culling_think_time_switch"
				operator = "ctrl_switch_float"
				input_switch = "@culling_and_unstopped.output"
				input1 = "-1.000000"
				input2 = "@calc_culling_think_time.output"
			},
			
			{
				name = "set_culling_dependency"
				input_execute = "@culling_and_unstopped.output"
				operator = "soundevent_control"
				input_add_dependent = "@culling_and_unstopped.output"
			},
			
			{
				name = "set_culling_wait_time"
				input_execute = "@culling_and_unstopped.output"
				operator = "soundevent_control"
				input_wait_time = "@culling_think_time_switch.output"
			},
			
			{
				name = "culling_goto_end"
				operator = "sos_goto"
				input_execute = "@culling_and_unstopped.output"
				execute_once = "false"
				input_goto_operator = "citadel_base_3d::has_stop_time"
			},
			
			{
				name = "soundevent_limit"
				execute_once = "true"
				operator = "soundevent_limiter"
				input_execute = "@public.limiter_on"
				input_max_events = "@public.limiter_max"
				match_entity = "@public.limiter_match_entity"
				stop_oldest = "@public.limiter_stop_oldest"
				match_duration_type = "greater_than_or_equal"
				match_event_duration = "@public.limiter_match_event_duration"
				match_this_event = "true"
			},
			
			{
				name = "volume_to_gain"
				operator = "math_db_to_gain"
				input = "@public.volume"
			},
			
			{
				name = "volume_rand_min_to_gain"
				operator = "math_db_to_gain"
				input = "@public.volume_rand_max"
			},
			
			{
				name = "volume_rand_max_to_gain"
				operator = "math_db_to_gain"
				input = "@public.volume_rand_min"
			},
			
			{
				name = "volume_random"
				operator = "math_randomize_float"
				execute_once = "true"
				input = "1.000000"
				input_rand_min = "@volume_rand_min_to_gain.output"
				input_rand_max = "@volume_rand_max_to_gain.output"
			},
			
			{
				name = "block_pitch_from_code_switch"
				operator = "ctrl_switch_float"
				input1 = "@public.pitch"
				input2 = "@public.pitch_force_input_to_value"
				input_switch = "@public.pitch_force_input_to_value"
			},
			
			{
				name = "pitch_random"
				operator = "math_randomize_float"
				execute_once = "true"
				input = "@block_pitch_from_code_switch.output"
				input_rand_min = "@public.pitch_rand_min"
				input_rand_max = "@public.pitch_rand_max"
			},
			
			{
				name = "pitch_mod"
				operator = "math_parameter_accumulator"
				execute_once = "true"
				input = "@public.pitch_modulation_max"
				attack = "@public.pitch_modulation_attack"
				release = "@public.pitch_modulation_release"
				namespace = "@public.pitch_modulation_namespace"
				baseline = "1.0"
			},
			
			{
				name = "pitch_mult"
				operator = "math_float"
				apply = "mult"
				execute_once = "true"
				input1 = "@pitch_mod.output"
				input2 = "@pitch_random.output"
			},
			
			{
				name = "calc_doppler"
				input_execute = "@public.doppler_on"
				operator = "math_calc_doppler"
				input_source_position = "@add_position_offset.output"
				input_observer_position = "@globals.output_listener_position"
				input_doppler_factor = "@public.doppler_factor"
				input_doppler_factor_receding = "@public.doppler_factor_receding"
				input_doppler_observer_scale = "0.050000"
			},
			
			{
				name = "doppler_filter"
				operator = "math_filter_float"
				input = "@calc_doppler.output"
				input_max_velocity = "1.000000"
			},
			
			{
				name = "mult_pitch_doppler"
				operator = "math_float"
				apply = "mult"
				input1 = "@pitch_mult.output"
				input2 = "@doppler_filter.output"
			},
			
			{
				name = "pitch_adjustment"
				operator = "math_float"
				apply = "mult"
				input1 = "@public.pitch_adjust"
				input2 = "@mult_pitch_doppler.output"
			},
			
			{
				name = "mixer"
				operator = "soundmixer_get_mixgroup"
				input_execute = "@math_not_in_predelay.output"
				mixgroup = "@public.mixer_mixgroup"
				input_class_name = "@source_info.output_entity_classname"
				input_is_player = "false"
				input_soundlevel = "60"
				input_event_type = "0"
			},
			
			{
				name = "occlusion_mixer_mult"
				operator = "math_float"
				apply = "mult"
				input1 = "@public.occlusion_scale"
				input2 = "@mixer.output_level"
			},
			
			{
				name = "citadel_distance_falloff"
				operator = "sos_import_stack"
				import_stack = "citadel_distance_falloff"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
					distance = 
					{
						data_type = "float"
						value = "@distance_filter.output"
					}
				}
			},
			
			{
				name = "occlusion_calc_enabled"
				operator = "math_float"
				input_execute = 1.000000
				apply = "greater_than"
				input1 = "@citadel_distance_falloff::output.result_vol_linear"
				input2 = "0.001"
			},
			
			{
				name = "occlusion"
				operator = "calc_occlusion_src2"
				input_execute = "@occlusion_calc_enabled.output"
				input_scalar = "@occlusion_mixer_mult.output"
				input_radius = "@public.occlusion_radius"
				min_output = "@public.occlusion_min"
				max_output = "@public.occlusion_max"
				input_source_position = "@add_position_offset.output"
				input_listener_position = "@globals.output_listener_position"
				input_trace_interval = "@public.occlusion_interval"
			},
			
			{
				name = "occlusion_max_distance_switch"
				operator = "ctrl_switch_float"
				input_switch = "@occlusion_calc_enabled.output"
				input1 = "@public.occlusion_min"
				input2 = "@occlusion.output"
			},
			
			{
				name = "occlusion_filter"
				operator = "math_filter_float"
				input = "@occlusion_max_distance_switch.output"
				input_max_velocity = "@public.occlusion_max_velocity"
			},
			
			{
				name = "occlusion_submix_math_invert"
				operator = "math_float"
				apply = "sub"
				input1 = "1.000000"
				input2 = "@occlusion_filter.output"
			},
			
			{
				name = "volume_fade_in"
				operator = "math_remap_float"
				input = "@get_event_info.output_elapsed_time"
				input_min = "0.000000"
				input_max = "@public.volume_fade_in"
				input_map_min = "0.000000"
				input_map_max = "1.000000"
				default_to_max = "true"
			},
			
			{
				name = "remap_fade_over_time"
				operator = "math_curve_2d"
				input = "@get_event_info.output_elapsed_time"
				public_field_name = "public.volume_fade_over_time_curve"
			},
			
			{
				name = "volume_atten_override_switch"
				operator = "ctrl_switch_float"
				input1 = "@public.volume_atten"
				input2 = "@public.volume_atten_override"
				input_switch = "@public.volume_atten_override"
			},
			
			{
				name = "citadel_facing_atten"
				input_execute = "@public.facing_vol_attenuation_on"
				operator = "sos_import_stack"
				import_stack = "citadel_facing_atten"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
					listener_forward = 
					{
						data_type = "float3"
						value = "@globals.output_listener_forward"
					}
					listener_position = 
					{
						data_type = "float3"
						value = "@globals.output_listener_position"
					}
					source_position = 
					{
						data_type = "float3"
						value = "@add_position_offset.output"
					}
					facing_mult = 
					{
						data_type = "float"
						value = "1.000000"
					}
					facing_min = 
					{
						data_type = "float"
						value = "0.0000"
					}
					facing_max = 
					{
						data_type = "float"
						value = "1.00000"
					}
					facing_scale_min = 
					{
						data_type = "float"
						value = "0.000000"
					}
					facing_scale_max = 
					{
						data_type = "float"
						value = "1.000000"
					}
				}
			},
			
			{
				name = "reverb_send_distance_curve"
				operator = "math_curve_2d"
				input = "@distance_filter.output"
				public_field_name = "public.reverb_falloff_curve"
				input_scale_x = "@public.reverb_curve_max_distance"
				input_scale_y = "@public.reverb_curve_scale_y"
			},
			
			{
				name = "reverb_control_switch"
				operator = "ctrl_switch_float"
				input1 = "@public.reverb_xfade_value"
				input2 = "@reverb_send_distance_curve.output"
				input_switch = "@public.reverb_use_curve"
			},
			
			{
				name = "reverb_mixer_mult"
				operator = "math_float"
				apply = "mult"
				input1 = "@mixer.output_dsp"
				input2 = "@reverb_control_switch.output"
			},
			
			{
				name = "reverb_mult_wet_mix"
				operator = "math_float"
				apply = "mult"
				input1 = "@volume_filter.output"
				input2 = "@reverb_mixer_mult.output"
			},
			
			{
				name = "reverb_submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1.000000"
				execute_once = "false"
				input = "@reverb_mult_wet_mix.output"
				submix_name = "reverb"
				send_type = "named"
			},
			
			{
				name = "volume_convar_switch"
				operator = "ctrl_switch_float"
				input1 = 1.000000
				input2 = "@globals.output_snd_musicvolume_convar"
				input_switch = "@public.event_use_music_convar"
			},
			
			{
				name = "check_recency_bias_invalid"
				input_execute = "1.0"
				operator = "math_float"
				apply = "equal"
				input1 = "@public.recency_bias"
				input2 = "-1.0"
			},
			
			{
				name = "recency_bias_ease"
				input_execute = "1.0"
				operator = "math_func_float"
				function = "ease_sin_out"
				input1 = "@public.recency_bias"
			},
			
			{
				name = "remap_recency_bias_linear_vol"
				operator = "math_remap_float"
				input_execute = "1.0"
				input = "@recency_bias_ease.output"
				input_min = "0.0"
				input_max = "1.0"
				input_map_min = "@public.recency_bias_min_scale"
				input_map_max = "@public.recency_bias_max_scale"
				default_to_max = "false"
			},
			
			{
				name = "citadel_instance_attenuator"
				operator = "sos_import_stack"
				import_stack = "citadel_instance_attenuator"
				auto_connect_public_fields = "true"
			},
			
			{
				name = "volume_accumulate_pre_reverb"
				operator = "math_accumulate12_float"
				apply = "mult"
				input2 = "@mixer.output_volume"
				input3 = "@volume_to_gain.output"
				input4 = "@citadel_distance_falloff::output.result_vol_linear"
				input5 = "@volume_fade_in.output"
				input6 = "@volume_convar_switch.output"
				input8 = "@public.volume_mult"
				input9 = "@volume_atten_override_switch.output"
				input10 = "@remap_recency_bias_linear_vol.output"
				input11 = "@citadel_instance_attenuator::output.result_vol_offset_linear"
				input12 = "@remap_fade_over_time.output"
			},
			
			{
				name = "volume_filter"
				operator = "math_filter_float"
				input = "@volume_accumulate_pre_reverb.output"
				input_max_velocity = "@public.volume_filter_amount"
			},
			
			{
				name = "get_vsnd_info"
				operator = "vmix_vsnd_info"
				input_vsnd = "@public.vsnd_file"
			},
			
			{
				name = "get_voice_elapsed_time"
				operator = "vmix_voice_time"
				input_execute = "@get_vsnd_info.output_has_envelope"
			},
			
			{
				name = "sample_env_curve"
				operator = "container_sample_curve"
				input_execute = "@get_vsnd_info.output_has_envelope"
				input_time = "@get_voice_elapsed_time.output_voice_seek_time"
				input_container = "@public.vsnd_file"
			},
			
			{
				name = "select_envelope_check"
				operator = "ctrl_switch_float"
				input_switch = "@get_vsnd_info.output_has_envelope"
				input1 = "@volume_filter.output"
				input2 = "@sample_env_curve.output"
			},
			
			{
				name = "mixer_trigger_select_input"
				operator = "ctrl_switch3_float"
				input_index = "@public.mixer_trigger_input"
				input0 = "@volume_filter.output"
				input1 = "@select_envelope_check.output"
				input2 = "@public.mixer_trigger_amount_manual"
			},
			
			{
				name = "mixer_trigger"
				operator = "soundmixer_set_trigger"
				input_trigger = "@mixer_trigger_select_input.output"
				input_mixgroups = "@mixer.output_mixgroups"
			},
			
			{
				name = "set_mixlayer_enabled"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.mixer_set_mixlayer_input"
				input2 = "0.000000"
			},
			
			{
				name = "mixlayer_select_input"
				operator = "ctrl_switch12_float"
				input_execute = "@set_mixlayer_enabled.output"
				input_index = "@public.mixer_set_mixlayer_input"
				input0 = "0.0"
				input1 = "@volume_filter.output"
				input2 = "@select_envelope_check.output"
				input3 = "@public.mixer_mixlayer_amount_manual"
			},
			
			{
				name = "mixer_set_mixlayer"
				operator = "soundmixer_set_mixlayer_amount"
				input_execute = "@set_mixlayer_enabled.output"
				input = "@mixlayer_select_input.output"
				mixlayer = "@public.mixer_mixlayer_to_set"
			},
			
			{
				name = "submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1"
				input = "@volume_filter.output"
				submix_name = "@public.send_name"
				send_type = "named"
			},
			
			{
				name = "occlusion_volume_attenuation"
				operator = "sos_import_stack"
				import_stack = "citadel_occlusion_volume_attenuation"
				operator_variables = 
				{
					occlusion_gain_value = 
					{
						data_type = "float"
						value = "@occlusion_filter.output"
					}
					distance = 
					{
						data_type = "float"
						value = "@distance_filter.output"
					}
					distance_min = 
					{
						data_type = "float"
						value = "@public.occlusion_volume_blend_distance_min"
					}
					distance_max = 
					{
						data_type = "float"
						value = "@public.occlusion_volume_blend_distance_max"
					}
				}
			},
			
			{
				name = "citadel_initial_reflection_send"
				operator = "sos_import_stack"
				import_stack = "citadel_initial_reflection_send"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
					distance = 
					{
						data_type = "float"
						value = "@distance_filter.output"
					}
					post_fader_volume = 
					{
						data_type = "float"
						value = "@volume_filter.output"
					}
				}
			},
			
			{
				name = "speakers_spatialize"
				operator = "calc_spatialize_speakers_hrtf"
				execute_once = "@public.position_force_static"
				input_360_listener = 0.000000
				input_listener_angles = "@globals.output_listener_angles"
				input_hrtf_on = "@public.hrtf_on"
				input_hrtf_mix = "@public.hrtf_mix"
				input_distance = "@distance_filter.output"
				input_source_position = "@add_position_offset.output"
				input_listener_position = "@globals.output_listener_position"
				input_listener_left = "@globals.output_listener_left"
				input_listener_forward = "@globals.output_listener_forward"
				input_listener_up = "@globals.output_listener_up"
				input_spread_min_distance = "@public.spread_min"
				input_spread_max_distance = "@public.spread_max"
				input_spread_max_value = "@public.spread_max_value"
				input_spread_min_value = "@public.spread_min_value"
			},
			
			{
				name = "has_stop_time"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.event_stop_at_time"
				input2 = "0.000000"
			},
			
			{
				name = "add_stop_time_to_fade_out_time"
				operator = "math_float"
				apply = "add"
				input1 = "@public.event_stop_at_time"
				input2 = "@public.volume_fade_out"
			},
			
			{
				name = "elapsed_less_than_fade"
				operator = "math_float"
				apply = "less_than_or_equal"
				input1 = "@get_event_info.output_elapsed_time"
				input2 = "@add_stop_time_to_fade_out_time.output"
			},
			
			{
				name = "has_stop_time_and_not_elapsed"
				operator = "math_float"
				apply = "min"
				input1 = "@elapsed_less_than_fade.output"
				input2 = "@has_stop_time.output"
			},
			
			{
				name = "stop_at_time"
				operator = "soundevent_control"
				input_stop_at_time = "@public.event_stop_at_time"
			},
			
			{
				name = "set_output_opvar_distance"
				operator = "opvar_set_float"
				input_execute = "1.000000"
				input = "@distance_filter.output"
				input_operator_name = "output"
				input_field_name = "distance_for_limiter"
				input_use_namespace = "true"
			},
			
			{
				name = "set_output_opvar_volume"
				operator = "opvar_set_float"
				input_execute = "1.000000"
				input = "@citadel_distance_falloff::output.result_vol_linear"
				input_operator_name = "output"
				input_field_name = "volume_for_limiter"
				input_use_namespace = "true"
			},
			
			{
				name = "convar_get_debug_enabled"
				operator = "convar_get"
				convar = "audio_display_soundstack_debug_base_3d"
			},
			
			{
				name = "util_draw_debug_sphere"
				operator = "util_draw_debug_sphere"
				input_radius = "5.f"
				input_execute = "@convar_get_debug_enabled.output"
				input_position = "@add_position_offset.output"
				input_rgb_color = "[52., 235., 168.]"
				input_label = ""
				input_show_detailed_info = "1.0"
				detail_label_1 = "dist"
				detail_value_1 = "@distance_filter.output"
				detail_label_2 = "accum"
				detail_value_2 = "@volume_filter.output"
				detail_label_3 = "mxr"
				detail_value_3 = "@mixer.output_volume"
				detail_label_4 = "evnt"
				detail_value_4 = "@volume_to_gain.output"
				detail_label_5 = "fall"
				detail_value_5 = "@citadel_distance_falloff::output.result_vol_linear"
				detail_label_6 = "bias"
				detail_value_6 = "@remap_recency_bias_linear_vol.output"
				detail_label_7 = "inst"
				detail_value_7 = "@citadel_instance_attenuator::output.result_vol_offset_linear"
				detail_label_8 = "occl"
				detail_value_8 = "@occlusion_volume_attenuation::output.result"
			},
		]
		_system_properties = 
		{
			display_game = "citadel"
			display_group = "utility"
		}
	}
}